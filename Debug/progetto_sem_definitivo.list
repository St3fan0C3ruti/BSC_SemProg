
progetto_sem_definitivo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005b90  08005b90  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b90  08005b90  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b9c  20000060  08005bf8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  08005bf8  00021bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e02  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b5  00000000  00000000  00034ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00037f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec8  00000000  00000000  000392d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021619  00000000  00000000  0003a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015438  00000000  00000000  0005b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce476  00000000  00000000  00070be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005288  00000000  00000000  0013f060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001442e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005af0 	.word	0x08005af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005af0 	.word	0x08005af0

080001d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <MX_FREERTOS_Init+0x18>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <MX_FREERTOS_Init+0x1c>)
 80001da:	f002 fe6b 	bl	8002eb4 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <MX_FREERTOS_Init+0x20>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	08005b2c 	.word	0x08005b2c
 80001ec:	080001f5 	.word	0x080001f5
 80001f0:	2000007c 	.word	0x2000007c

080001f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f002 feeb 	bl	8002fd8 <osDelay>
 8000202:	e7fb      	b.n	80001fc <StartDefaultTask+0x8>

08000204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <MX_GPIO_Init+0x90>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	4a1d      	ldr	r2, [pc, #116]	; (8000294 <MX_GPIO_Init+0x90>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <MX_GPIO_Init+0x90>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <MX_GPIO_Init+0x90>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	4a17      	ldr	r2, [pc, #92]	; (8000294 <MX_GPIO_Init+0x90>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <MX_GPIO_Init+0x90>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2108      	movs	r1, #8
 800024e:	4812      	ldr	r0, [pc, #72]	; (8000298 <MX_GPIO_Init+0x94>)
 8000250:	f000 fdf2 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FRENO_SENSE_Pin|SPEED_SENSE_Pin|SensorePedale_Pin;
 8000254:	2358      	movs	r3, #88	; 0x58
 8000256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800025c:	2302      	movs	r3, #2
 800025e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	4619      	mov	r1, r3
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f000 fc7b 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800026e:	2308      	movs	r3, #8
 8000270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000272:	2301      	movs	r3, #1
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 030c 	add.w	r3, r7, #12
 8000282:	4619      	mov	r1, r3
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <MX_GPIO_Init+0x94>)
 8000286:	f000 fc6d 	bl	8000b64 <HAL_GPIO_Init>

}
 800028a:	bf00      	nop
 800028c:	3720      	adds	r7, #32
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	48000400 	.word	0x48000400

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 fad9 	bl	8000856 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f80d 	bl	80002c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f7ff ffac 	bl	8000204 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002ac:	f000 f8d0 	bl	8000450 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002b0:	f000 f992 	bl	80005d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80002b4:	f002 fdb4 	bl	8002e20 <osKernelInitialize>
  MX_FREERTOS_Init();
 80002b8:	f7ff ff8a 	bl	80001d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002bc:	f002 fdd4 	bl	8002e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <main+0x24>

080002c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b096      	sub	sp, #88	; 0x58
 80002c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2244      	movs	r2, #68	; 0x44
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f005 fb23 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	463b      	mov	r3, r7
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e8:	f000 fdcc 	bl	8000e84 <HAL_PWREx_ControlVoltageScaling>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f2:	f000 f82c 	bl	800034e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f6:	2310      	movs	r3, #16
 80002f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000302:	2360      	movs	r3, #96	; 0x60
 8000304:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000306:	2300      	movs	r3, #0
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fe0e 	bl	8000f30 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800031a:	f000 f818 	bl	800034e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	463b      	mov	r3, r7
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fa0e 	bl	8001758 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000342:	f000 f804 	bl	800034e <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3758      	adds	r7, #88	; 0x58
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000352:	b672      	cpsid	i
}
 8000354:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000356:	e7fe      	b.n	8000356 <Error_Handler+0x8>

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <HAL_MspInit+0x4c>)
 8000360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <HAL_MspInit+0x4c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6613      	str	r3, [r2, #96]	; 0x60
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <HAL_MspInit+0x4c>)
 800036c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <HAL_MspInit+0x4c>)
 8000378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <HAL_MspInit+0x4c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	6593      	str	r3, [r2, #88]	; 0x58
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <HAL_MspInit+0x4c>)
 8000384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	210f      	movs	r1, #15
 8000392:	f06f 0001 	mvn.w	r0, #1
 8000396:	f000 fbae 	bl	8000af6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <NMI_Handler+0x4>

080003ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <HardFault_Handler+0x4>

080003b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <MemManage_Handler+0x4>

080003ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <BusFault_Handler+0x4>

080003c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <UsageFault_Handler+0x4>

080003c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d8:	f000 fa92 	bl	8000900 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80003dc:	f004 fa34 	bl	8004848 <xTaskGetSchedulerState>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d001      	beq.n	80003ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80003e6:	f005 f81f 	bl	8005428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80003f4:	4802      	ldr	r0, [pc, #8]	; (8000400 <TIM1_TRG_COM_IRQHandler+0x10>)
 80003f6:	f001 fc53 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000080 	.word	0x20000080

08000404 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <TIM1_CC_IRQHandler+0x10>)
 800040a:	f001 fc49 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000080 	.word	0x20000080

08000418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <TIM2_IRQHandler+0x10>)
 800041e:	f001 fc3f 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000cc 	.word	0x200000cc

0800042c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <SystemInit+0x20>)
 8000432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <SystemInit+0x20>)
 8000438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800043c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b09a      	sub	sp, #104	; 0x68
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000456:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000464:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]
 8000482:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	222c      	movs	r2, #44	; 0x2c
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f005 fa46 	bl	800591c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000490:	4b4f      	ldr	r3, [pc, #316]	; (80005d0 <MX_TIM1_Init+0x180>)
 8000492:	4a50      	ldr	r2, [pc, #320]	; (80005d4 <MX_TIM1_Init+0x184>)
 8000494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000496:	4b4e      	ldr	r3, [pc, #312]	; (80005d0 <MX_TIM1_Init+0x180>)
 8000498:	2203      	movs	r2, #3
 800049a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800049c:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <MX_TIM1_Init+0x180>)
 800049e:	2220      	movs	r2, #32
 80004a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80004a2:	4b4b      	ldr	r3, [pc, #300]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b49      	ldr	r3, [pc, #292]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004b0:	4b47      	ldr	r3, [pc, #284]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004b6:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004bc:	4844      	ldr	r0, [pc, #272]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004be:	f001 fb37 	bl	8001b30 <HAL_TIM_Base_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004c8:	f7ff ff41 	bl	800034e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004d6:	4619      	mov	r1, r3
 80004d8:	483d      	ldr	r0, [pc, #244]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004da:	f001 fdf7 	bl	80020cc <HAL_TIM_ConfigClockSource>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004e4:	f7ff ff33 	bl	800034e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004e8:	4839      	ldr	r0, [pc, #228]	; (80005d0 <MX_TIM1_Init+0x180>)
 80004ea:	f001 fb78 	bl	8001bde <HAL_TIM_PWM_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80004f4:	f7ff ff2b 	bl	800034e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000508:	4619      	mov	r1, r3
 800050a:	4831      	ldr	r0, [pc, #196]	; (80005d0 <MX_TIM1_Init+0x180>)
 800050c:	f002 fb58 	bl	8002bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000516:	f7ff ff1a 	bl	800034e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800051a:	2360      	movs	r3, #96	; 0x60
 800051c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000522:	2300      	movs	r3, #0
 8000524:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000526:	2300      	movs	r3, #0
 8000528:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	4824      	ldr	r0, [pc, #144]	; (80005d0 <MX_TIM1_Init+0x180>)
 8000540:	f001 fcb0 	bl	8001ea4 <HAL_TIM_PWM_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800054a:	f7ff ff00 	bl	800034e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800054e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000552:	2204      	movs	r2, #4
 8000554:	4619      	mov	r1, r3
 8000556:	481e      	ldr	r0, [pc, #120]	; (80005d0 <MX_TIM1_Init+0x180>)
 8000558:	f001 fca4 	bl	8001ea4 <HAL_TIM_PWM_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000562:	f7ff fef4 	bl	800034e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056a:	2208      	movs	r2, #8
 800056c:	4619      	mov	r1, r3
 800056e:	4818      	ldr	r0, [pc, #96]	; (80005d0 <MX_TIM1_Init+0x180>)
 8000570:	f001 fc98 	bl	8001ea4 <HAL_TIM_PWM_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800057a:	f7ff fee8 	bl	800034e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000596:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <MX_TIM1_Init+0x180>)
 80005b4:	f002 fb6a 	bl	8002c8c <HAL_TIMEx_ConfigBreakDeadTime>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80005be:	f7ff fec6 	bl	800034e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <MX_TIM1_Init+0x180>)
 80005c4:	f000 f8c8 	bl	8000758 <HAL_TIM_MspPostInit>

}
 80005c8:	bf00      	nop
 80005ca:	3768      	adds	r7, #104	; 0x68
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000080 	.word	0x20000080
 80005d4:	40012c00 	.word	0x40012c00

080005d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_TIM2_Init+0x90>)
 80005f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_TIM2_Init+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_TIM2_Init+0x90>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_TIM2_Init+0x90>)
 800060c:	f04f 32ff 	mov.w	r2, #4294967295
 8000610:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_TIM2_Init+0x90>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_TIM2_Init+0x90>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_TIM2_Init+0x90>)
 8000636:	f002 fa17 	bl	8002a68 <HAL_TIMEx_HallSensor_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000640:	f7ff fe85 	bl	800034e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000644:	2350      	movs	r3, #80	; 0x50
 8000646:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_TIM2_Init+0x90>)
 8000652:	f002 fab5 	bl	8002bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800065c:	f7ff fe77 	bl	800034e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000cc 	.word	0x200000cc

0800066c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <HAL_TIM_Base_MspInit+0x54>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d11b      	bne.n	80006b6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_TIM_Base_MspInit+0x58>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <HAL_TIM_Base_MspInit+0x58>)
 8000684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000688:	6613      	str	r3, [r2, #96]	; 0x60
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_TIM_Base_MspInit+0x58>)
 800068c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	201a      	movs	r0, #26
 800069c:	f000 fa2b 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80006a0:	201a      	movs	r0, #26
 80006a2:	f000 fa44 	bl	8000b2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2105      	movs	r1, #5
 80006aa:	201b      	movs	r0, #27
 80006ac:	f000 fa23 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006b0:	201b      	movs	r0, #27
 80006b2:	f000 fa3c 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40012c00 	.word	0x40012c00
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e8:	d130      	bne.n	800074c <HAL_TIMEx_HallSensor_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	4a19      	ldr	r2, [pc, #100]	; (8000754 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6593      	str	r3, [r2, #88]	; 0x58
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HALLB_Pin|HALLC_Pin|HALLA_Pin;
 800071a:	2326      	movs	r3, #38	; 0x26
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800072a:	2301      	movs	r3, #1
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f000 fa14 	bl	8000b64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2105      	movs	r1, #5
 8000740:	201c      	movs	r0, #28
 8000742:	f000 f9d8 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000746:	201c      	movs	r0, #28
 8000748:	f000 f9f1 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <HAL_TIM_MspPostInit+0xa0>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d139      	bne.n	80007ee <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <HAL_TIM_MspPostInit+0xa4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <HAL_TIM_MspPostInit+0xa4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <HAL_TIM_MspPostInit+0xa4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <HAL_TIM_MspPostInit+0xa4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a19      	ldr	r2, [pc, #100]	; (80007fc <HAL_TIM_MspPostInit+0xa4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_TIM_MspPostInit+0xa4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = INLA_Pin|INHA_Pin|INHB_Pin|INHC_Pin;
 80007aa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80007bc:	2301      	movs	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 f9cb 	bl	8000b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INLB_Pin|INLC_Pin;
 80007ce:	2303      	movs	r3, #3
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80007de:	2301      	movs	r3, #1
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <HAL_TIM_MspPostInit+0xa8>)
 80007ea:	f000 f9bb 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40012c00 	.word	0x40012c00
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400

08000804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800083c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000808:	f7ff fe10 	bl	800042c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000832:	f005 f8d1 	bl	80059d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000836:	f7ff fd31 	bl	800029c <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800083c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000848:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 800084c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000850:	20001bfc 	.word	0x20001bfc

08000854 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_IRQHandler>

08000856 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f93d 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f80e 	bl	8000888 <HAL_InitTick>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	e001      	b.n	800087c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000878:	f7ff fd6e 	bl	8000358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087c:	79fb      	ldrb	r3, [r7, #7]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_InitTick+0x6c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d023      	beq.n	80008e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_InitTick+0x70>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x6c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f949 	bl	8000b4a <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10f      	bne.n	80008de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d809      	bhi.n	80008d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f913 	bl	8000af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_InitTick+0x74>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e007      	b.n	80008e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e004      	b.n	80008e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e001      	b.n	80008e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008
 8000924:	20000118 	.word	0x20000118

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_GetTick+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000118 	.word	0x20000118

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <__NVIC_EnableIRQ+0x38>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff8e 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff29 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff3e 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff8e 	bl	8000a34 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5d 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff31 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa2 	bl	8000a9c <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e148      	b.n	8000e06 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 813a 	beq.w	8000e00 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d005      	beq.n	8000ba4 <HAL_GPIO_Init+0x40>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d130      	bne.n	8000c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bda:	2201      	movs	r2, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	091b      	lsrs	r3, r3, #4
 8000bf0:	f003 0201 	and.w	r2, r3, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d017      	beq.n	8000c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d123      	bne.n	8000c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	6939      	ldr	r1, [r7, #16]
 8000c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0203 	and.w	r2, r3, #3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8094 	beq.w	8000e00 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd8:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cdc:	4a51      	ldr	r2, [pc, #324]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce4:	4b4f      	ldr	r3, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf0:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1d4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1d0>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a42      	ldr	r2, [pc, #264]	; (8000e30 <HAL_GPIO_Init+0x2cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1cc>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1d6>
 8000d30:	2307      	movs	r3, #7
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1d6>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1d6>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d7c:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da6:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f aeaf 	bne.w	8000b74 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e48:	787b      	ldrb	r3, [r7, #1]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40007000 	.word	0x40007000

08000e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e92:	d130      	bne.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ea0:	d038      	beq.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2232      	movs	r2, #50	; 0x32
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	0c9b      	lsrs	r3, r3, #18
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec8:	e002      	b.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000edc:	d102      	bne.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f2      	bne.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef0:	d110      	bne.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e00f      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f02:	d007      	beq.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40007000 	.word	0x40007000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	431bde83 	.word	0x431bde83

08000f30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f000 bc02 	b.w	8001748 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f44:	4b96      	ldr	r3, [pc, #600]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4e:	4b94      	ldr	r3, [pc, #592]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80e4 	beq.w	800112e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_RCC_OscConfig+0x4c>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2b0c      	cmp	r3, #12
 8000f70:	f040 808b 	bne.w	800108a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	f040 8087 	bne.w	800108a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7c:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_OscConfig+0x64>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e3d9      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_RCC_OscConfig+0x7e>
 8000fa4:	4b7e      	ldr	r3, [pc, #504]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fac:	e005      	b.n	8000fba <HAL_RCC_OscConfig+0x8a>
 8000fae:	4b7c      	ldr	r3, [pc, #496]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d223      	bcs.n	8001006 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd54 	bl	8001a70 <RCC_SetFlashLatencyFromMSIRange>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e3ba      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a72      	ldr	r2, [pc, #456]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	496d      	ldr	r1, [pc, #436]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff0:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	4968      	ldr	r1, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
 8001004:	e025      	b.n	8001052 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001006:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a65      	ldr	r2, [pc, #404]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4960      	ldr	r1, [pc, #384]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	495b      	ldr	r1, [pc, #364]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fd14 	bl	8001a70 <RCC_SetFlashLatencyFromMSIRange>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e37a      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001052:	f000 fc81 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001056:	4602      	mov	r2, r0
 8001058:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	4950      	ldr	r1, [pc, #320]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 8001064:	5ccb      	ldrb	r3, [r1, r3]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_RCC_OscConfig+0x278>)
 8001070:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc06 	bl	8000888 <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d052      	beq.n	800112c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	e35e      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d032      	beq.n	80010f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001092:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800109e:	f7ff fc43 	bl	8000928 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010a6:	f7ff fc3f 	bl	8000928 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e347      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4930      	ldr	r1, [pc, #192]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	492b      	ldr	r1, [pc, #172]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]
 80010f6:	e01a      	b.n	800112e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc10 	bl	8000928 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800110c:	f7ff fc0c 	bl	8000928 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e314      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x1dc>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800112c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d073      	beq.n	8001222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b08      	cmp	r3, #8
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x21c>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	d10e      	bne.n	8001164 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d10b      	bne.n	8001164 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d063      	beq.n	8001220 <HAL_RCC_OscConfig+0x2f0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d15f      	bne.n	8001220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e2f1      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d106      	bne.n	800117c <HAL_RCC_OscConfig+0x24c>
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e025      	b.n	80011c8 <HAL_RCC_OscConfig+0x298>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001184:	d114      	bne.n	80011b0 <HAL_RCC_OscConfig+0x280>
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a02      	ldr	r2, [pc, #8]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e013      	b.n	80011c8 <HAL_RCC_OscConfig+0x298>
 80011a0:	40021000 	.word	0x40021000
 80011a4:	08005b50 	.word	0x08005b50
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004
 80011b0:	4ba0      	ldr	r3, [pc, #640]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a9f      	ldr	r2, [pc, #636]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b9d      	ldr	r3, [pc, #628]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a9c      	ldr	r2, [pc, #624]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbaa 	bl	8000928 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fba6 	bl	8000928 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e2ae      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b92      	ldr	r3, [pc, #584]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x2a8>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb96 	bl	8000928 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fb92 	bl	8000928 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e29a      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x2d0>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d060      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d005      	beq.n	8001240 <HAL_RCC_OscConfig+0x310>
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	d119      	bne.n	800126e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d116      	bne.n	800126e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001240:	4b7c      	ldr	r3, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x328>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e277      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	061b      	lsls	r3, r3, #24
 8001266:	4973      	ldr	r1, [pc, #460]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126c:	e040      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d023      	beq.n	80012be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6e      	ldr	r2, [pc, #440]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fb51 	bl	8000928 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fb4d 	bl	8000928 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e255      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129c:	4b65      	ldr	r3, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b62      	ldr	r3, [pc, #392]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	495f      	ldr	r1, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e018      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a5c      	ldr	r2, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb2d 	bl	8000928 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fb29 	bl	8000928 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e231      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d03c      	beq.n	8001376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d01c      	beq.n	800133e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001304:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130a:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001314:	f7ff fb08 	bl	8000928 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fb04 	bl	8000928 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e20c      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ef      	beq.n	800131c <HAL_RCC_OscConfig+0x3ec>
 800133c:	e01b      	b.n	8001376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001344:	4a3b      	ldr	r2, [pc, #236]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134e:	f7ff faeb 	bl	8000928 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fae7 	bl	8000928 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1ef      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ef      	bne.n	8001356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80a6 	beq.w	80014d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10d      	bne.n	80013b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139e:	6593      	str	r3, [r2, #88]	; 0x58
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d118      	bne.n	80013ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c8:	f7ff faae 	bl	8000928 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d0:	f7ff faaa 	bl	8000928 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1b2      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_OscConfig+0x4d8>
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001406:	e029      	b.n	800145c <HAL_RCC_OscConfig+0x52c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b05      	cmp	r3, #5
 800140e:	d115      	bne.n	800143c <HAL_RCC_OscConfig+0x50c>
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x52c>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	4b9a      	ldr	r3, [pc, #616]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a99      	ldr	r2, [pc, #612]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800144c:	4b96      	ldr	r3, [pc, #600]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	4a95      	ldr	r2, [pc, #596]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d016      	beq.n	8001492 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fa60 	bl	8000928 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fa5c 	bl	8000928 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e162      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ed      	beq.n	800146c <HAL_RCC_OscConfig+0x53c>
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fa49 	bl	8000928 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fa45 	bl	8000928 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e14b      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b0:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ed      	bne.n	800149a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80014ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d03c      	beq.n	8001556 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01c      	beq.n	800151e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014e4:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80014e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa18 	bl	8000928 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014fc:	f7ff fa14 	bl	8000928 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e11c      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800150e:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ef      	beq.n	80014fc <HAL_RCC_OscConfig+0x5cc>
 800151c:	e01b      	b.n	8001556 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800151e:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001524:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff f9fb 	bl	8000928 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001536:	f7ff f9f7 	bl	8000928 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0ff      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001548:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 800154a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ef      	bne.n	8001536 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80f3 	beq.w	8001746 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	2b02      	cmp	r3, #2
 8001566:	f040 80c9 	bne.w	80016fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800156a:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0203 	and.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	429a      	cmp	r2, r3
 800157c:	d12c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	3b01      	subs	r3, #1
 800158a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d123      	bne.n	80015d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d11b      	bne.n	80015d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d113      	bne.n	80015d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	3b01      	subs	r3, #1
 80015be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d109      	bne.n	80015d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	3b01      	subs	r3, #1
 80015d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d06b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d062      	beq.n	80016a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0ac      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 80015f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015fa:	f7ff f995 	bl	8000928 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff f991 	bl	8000928 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e099      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x77c>)
 8001626:	4013      	ands	r3, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001630:	3a01      	subs	r2, #1
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	4311      	orrs	r1, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	4311      	orrs	r1, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001642:	0852      	lsrs	r2, r2, #1
 8001644:	3a01      	subs	r2, #1
 8001646:	0552      	lsls	r2, r2, #21
 8001648:	4311      	orrs	r1, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800164e:	0852      	lsrs	r2, r2, #1
 8001650:	3a01      	subs	r2, #1
 8001652:	0652      	lsls	r2, r2, #25
 8001654:	4311      	orrs	r1, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800165a:	06d2      	lsls	r2, r2, #27
 800165c:	430a      	orrs	r2, r1
 800165e:	4912      	ldr	r1, [pc, #72]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 800166a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800167c:	f7ff f954 	bl	8000928 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f950 	bl	8000928 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e058      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_RCC_OscConfig+0x778>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a2:	e050      	b.n	8001746 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e04f      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d144      	bne.n	8001746 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016d4:	f7ff f928 	bl	8000928 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff f924 	bl	8000928 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e02c      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x7ac>
 80016fa:	e024      	b.n	8001746 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d01f      	beq.n	8001742 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 8001708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff f90b 	bl	8000928 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff f907 	bl	8000928 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e00f      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4905      	ldr	r1, [pc, #20]	; (8001750 <HAL_RCC_OscConfig+0x820>)
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_OscConfig+0x824>)
 800173c:	4013      	ands	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
 8001740:	e001      	b.n	8001746 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	feeefffc 	.word	0xfeeefffc

08001758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0e7      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b75      	ldr	r3, [pc, #468]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d910      	bls.n	800179c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 0207 	bic.w	r2, r3, #7
 8001782:	4970      	ldr	r1, [pc, #448]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b6e      	ldr	r3, [pc, #440]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0cf      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d010      	beq.n	80017ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d908      	bls.n	80017ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4960      	ldr	r1, [pc, #384]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d04c      	beq.n	8001870 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d121      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0a6      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d115      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e09a      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e08e      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e086      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b46      	ldr	r3, [pc, #280]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4943      	ldr	r1, [pc, #268]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001840:	f7ff f872 	bl	8000928 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff f86e 	bl	8000928 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e06e      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001888:	429a      	cmp	r2, r3
 800188a:	d208      	bcs.n	800189e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	492b      	ldr	r1, [pc, #172]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d210      	bcs.n	80018ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 0207 	bic.w	r2, r3, #7
 80018b4:	4923      	ldr	r1, [pc, #140]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e036      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d009      	beq.n	800190c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4910      	ldr	r1, [pc, #64]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190c:	f000 f824 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	490b      	ldr	r1, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1f4>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1f8>)
 800192a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1fc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe ffa9 	bl	8000888 <HAL_InitTick>
 8001936:	4603      	mov	r3, r0
 8001938:	72fb      	strb	r3, [r7, #11]

  return status;
 800193a:	7afb      	ldrb	r3, [r7, #11]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08005b50 	.word	0x08005b50
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001970:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x34>
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d121      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d11e      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800198c:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001998:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e005      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x110>)
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	e004      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x114>)
 80019de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d134      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0xa6>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d003      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0xac>
 80019fc:	e005      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a00:	617b      	str	r3, [r7, #20]
      break;
 8001a02:	e005      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a06:	617b      	str	r3, [r7, #20]
      break;
 8001a08:	e002      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	617b      	str	r3, [r7, #20]
      break;
 8001a0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	fb03 f202 	mul.w	r2, r3, r2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	0e5b      	lsrs	r3, r3, #25
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	3301      	adds	r3, #1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a50:	69bb      	ldr	r3, [r7, #24]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08005b60 	.word	0x08005b60
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a88:	f7ff f9ee 	bl	8000e68 <HAL_PWREx_GetVoltageRange>
 8001a8c:	6178      	str	r0, [r7, #20]
 8001a8e:	e014      	b.n	8001aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001aa8:	f7ff f9de 	bl	8000e68 <HAL_PWREx_GetVoltageRange>
 8001aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac0:	d10b      	bne.n	8001ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b80      	cmp	r3, #128	; 0x80
 8001ac6:	d919      	bls.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2ba0      	cmp	r3, #160	; 0xa0
 8001acc:	d902      	bls.n	8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ace:	2302      	movs	r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e013      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e010      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d902      	bls.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e00a      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d102      	bne.n	8001af2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aec:	2302      	movs	r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e004      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b70      	cmp	r3, #112	; 0x70
 8001af6:	d101      	bne.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40022000 	.word	0x40022000

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e049      	b.n	8001bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe fd88 	bl	800066c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 fba8 	bl	80022c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e049      	b.n	8001c84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f841 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f000 fb51 	bl	80022c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d020      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01b      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0202 	mvn.w	r2, #2
 8001cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 facb 	bl	8002286 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fabd 	bl	8002272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 face 	bl	800229a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 faa5 	bl	8002286 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fa97 	bl	8002272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 faa8 	bl	800229a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0208 	mvn.w	r2, #8
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2204      	movs	r2, #4
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fa7f 	bl	8002286 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa71 	bl	8002272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fa82 	bl	800229a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d020      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0210 	mvn.w	r2, #16
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa59 	bl	8002286 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa4b 	bl	8002272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa5c 	bl	800229a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0201 	mvn.w	r2, #1
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fa29 	bl	800225e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 ffb0 	bl	8002d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 ffa8 	bl	8002da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa1b 	bl	80022ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0220 	mvn.w	r2, #32
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 ff70 	bl	8002d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e0ff      	b.n	80020c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b14      	cmp	r3, #20
 8001ece:	f200 80f0 	bhi.w	80020b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f2d 	.word	0x08001f2d
 8001edc:	080020b3 	.word	0x080020b3
 8001ee0:	080020b3 	.word	0x080020b3
 8001ee4:	080020b3 	.word	0x080020b3
 8001ee8:	08001f6d 	.word	0x08001f6d
 8001eec:	080020b3 	.word	0x080020b3
 8001ef0:	080020b3 	.word	0x080020b3
 8001ef4:	080020b3 	.word	0x080020b3
 8001ef8:	08001faf 	.word	0x08001faf
 8001efc:	080020b3 	.word	0x080020b3
 8001f00:	080020b3 	.word	0x080020b3
 8001f04:	080020b3 	.word	0x080020b3
 8001f08:	08001fef 	.word	0x08001fef
 8001f0c:	080020b3 	.word	0x080020b3
 8001f10:	080020b3 	.word	0x080020b3
 8001f14:	080020b3 	.word	0x080020b3
 8001f18:	08002031 	.word	0x08002031
 8001f1c:	080020b3 	.word	0x080020b3
 8001f20:	080020b3 	.word	0x080020b3
 8001f24:	080020b3 	.word	0x080020b3
 8001f28:	08002071 	.word	0x08002071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fa2a 	bl	800238c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0208 	orr.w	r2, r2, #8
 8001f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0204 	bic.w	r2, r2, #4
 8001f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6999      	ldr	r1, [r3, #24]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	619a      	str	r2, [r3, #24]
      break;
 8001f6a:	e0a5      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fa86 	bl	8002484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6999      	ldr	r1, [r3, #24]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	021a      	lsls	r2, r3, #8
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	619a      	str	r2, [r3, #24]
      break;
 8001fac:	e084      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fadf 	bl	8002578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0208 	orr.w	r2, r2, #8
 8001fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0204 	bic.w	r2, r2, #4
 8001fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69d9      	ldr	r1, [r3, #28]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
      break;
 8001fec:	e064      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fb37 	bl	8002668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69d9      	ldr	r1, [r3, #28]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	61da      	str	r2, [r3, #28]
      break;
 800202e:	e043      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fb74 	bl	8002724 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0208 	orr.w	r2, r2, #8
 800204a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800206e:	e023      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fbac 	bl	80027d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	021a      	lsls	r2, r3, #8
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80020b0:	e002      	b.n	80020b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
      break;
 80020b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop

080020cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_TIM_ConfigClockSource+0x1c>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e0b6      	b.n	8002256 <HAL_TIM_ConfigClockSource+0x18a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800210a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002124:	d03e      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xd8>
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	f200 8087 	bhi.w	800223c <HAL_TIM_ConfigClockSource+0x170>
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	f000 8086 	beq.w	8002242 <HAL_TIM_ConfigClockSource+0x176>
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	d87f      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 800213c:	2b70      	cmp	r3, #112	; 0x70
 800213e:	d01a      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xaa>
 8002140:	2b70      	cmp	r3, #112	; 0x70
 8002142:	d87b      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d050      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x11e>
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d877      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 800214c:	2b50      	cmp	r3, #80	; 0x50
 800214e:	d03c      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0xfe>
 8002150:	2b50      	cmp	r3, #80	; 0x50
 8002152:	d873      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d058      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x13e>
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d86f      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 800215c:	2b30      	cmp	r3, #48	; 0x30
 800215e:	d064      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x15e>
 8002160:	2b30      	cmp	r3, #48	; 0x30
 8002162:	d86b      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 8002164:	2b20      	cmp	r3, #32
 8002166:	d060      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x15e>
 8002168:	2b20      	cmp	r3, #32
 800216a:	d867      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x170>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d05c      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x15e>
 8002170:	2b10      	cmp	r3, #16
 8002172:	d05a      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x15e>
 8002174:	e062      	b.n	800223c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002186:	f000 fc4f 	bl	8002a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	609a      	str	r2, [r3, #8]
      break;
 80021a2:	e04f      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021b4:	f000 fc38 	bl	8002a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c6:	609a      	str	r2, [r3, #8]
      break;
 80021c8:	e03c      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 fbac 	bl	8002934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2150      	movs	r1, #80	; 0x50
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fc05 	bl	80029f2 <TIM_ITRx_SetConfig>
      break;
 80021e8:	e02c      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f6:	461a      	mov	r2, r3
 80021f8:	f000 fbcb 	bl	8002992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2160      	movs	r1, #96	; 0x60
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fbf5 	bl	80029f2 <TIM_ITRx_SetConfig>
      break;
 8002208:	e01c      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002216:	461a      	mov	r2, r3
 8002218:	f000 fb8c 	bl	8002934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2140      	movs	r1, #64	; 0x40
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fbe5 	bl	80029f2 <TIM_ITRx_SetConfig>
      break;
 8002228:	e00c      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f000 fbdc 	bl	80029f2 <TIM_ITRx_SetConfig>
      break;
 800223a:	e003      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      break;
 8002240:	e000      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <TIM_Base_SetConfig+0xbc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <TIM_Base_SetConfig+0x20>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d108      	bne.n	80022f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <TIM_Base_SetConfig+0xbc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_Base_SetConfig+0x52>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0x52>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <TIM_Base_SetConfig+0xc0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0x52>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <TIM_Base_SetConfig+0xc4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <TIM_Base_SetConfig+0xbc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <TIM_Base_SetConfig+0xa0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <TIM_Base_SetConfig+0xc0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <TIM_Base_SetConfig+0xa0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <TIM_Base_SetConfig+0xc4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d103      	bne.n	800236c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	615a      	str	r2, [r3, #20]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40014000 	.word	0x40014000
 8002388:	40014400 	.word	0x40014400

0800238c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f023 0201 	bic.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f023 0302 	bic.w	r3, r3, #2
 80023d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <TIM_OC1_SetConfig+0xec>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <TIM_OC1_SetConfig+0x70>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <TIM_OC1_SetConfig+0xf0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d003      	beq.n	80023fc <TIM_OC1_SetConfig+0x70>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a22      	ldr	r2, [pc, #136]	; (8002480 <TIM_OC1_SetConfig+0xf4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10c      	bne.n	8002416 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0308 	bic.w	r3, r3, #8
 8002402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a17      	ldr	r2, [pc, #92]	; (8002478 <TIM_OC1_SetConfig+0xec>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <TIM_OC1_SetConfig+0xa2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a16      	ldr	r2, [pc, #88]	; (800247c <TIM_OC1_SetConfig+0xf0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_OC1_SetConfig+0xa2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <TIM_OC1_SetConfig+0xf4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800243c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	621a      	str	r2, [r3, #32]
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40014000 	.word	0x40014000
 8002480:	40014400 	.word	0x40014400

08002484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f023 0210 	bic.w	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0320 	bic.w	r3, r3, #32
 80024d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <TIM_OC2_SetConfig+0xe8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10d      	bne.n	8002504 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <TIM_OC2_SetConfig+0xe8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <TIM_OC2_SetConfig+0x98>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <TIM_OC2_SetConfig+0xec>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_OC2_SetConfig+0x98>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <TIM_OC2_SetConfig+0xf0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d113      	bne.n	8002544 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800252a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	621a      	str	r2, [r3, #32]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40014000 	.word	0x40014000
 8002574:	40014400 	.word	0x40014400

08002578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a21      	ldr	r2, [pc, #132]	; (800265c <TIM_OC3_SetConfig+0xe4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10d      	bne.n	80025f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <TIM_OC3_SetConfig+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_OC3_SetConfig+0x96>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <TIM_OC3_SetConfig+0xe8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_OC3_SetConfig+0x96>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a16      	ldr	r2, [pc, #88]	; (8002664 <TIM_OC3_SetConfig+0xec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d113      	bne.n	8002636 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800261c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40014000 	.word	0x40014000
 8002664:	40014400 	.word	0x40014400

08002668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	031b      	lsls	r3, r3, #12
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <TIM_OC4_SetConfig+0xb0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <TIM_OC4_SetConfig+0x74>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <TIM_OC4_SetConfig+0xb4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_OC4_SetConfig+0x74>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <TIM_OC4_SetConfig+0xb8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d109      	bne.n	80026f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40014000 	.word	0x40014000
 8002720:	40014400 	.word	0x40014400

08002724 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002768:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <TIM_OC5_SetConfig+0xa4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_OC5_SetConfig+0x6a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <TIM_OC5_SetConfig+0xa8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_OC5_SetConfig+0x6a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <TIM_OC5_SetConfig+0xac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d109      	bne.n	80027a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40014400 	.word	0x40014400

080027d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	051b      	lsls	r3, r3, #20
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_OC6_SetConfig+0xa8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <TIM_OC6_SetConfig+0x6c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <TIM_OC6_SetConfig+0xac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_OC6_SetConfig+0x6c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <TIM_OC6_SetConfig+0xb0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d109      	bne.n	8002854 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	029b      	lsls	r3, r3, #10
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40014000 	.word	0x40014000
 8002884:	40014400 	.word	0x40014400

08002888 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 0201 	bic.w	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <TIM_TI1_SetConfig+0xa4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_TI1_SetConfig+0x3e>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d003      	beq.n	80028c6 <TIM_TI1_SetConfig+0x3e>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <TIM_TI1_SetConfig+0xa8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <TIM_TI1_SetConfig+0x42>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <TIM_TI1_SetConfig+0x44>
 80028ca:	2300      	movs	r3, #0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e003      	b.n	80028ea <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 030a 	bic.w	r3, r3, #10
 8002904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 030a 	and.w	r3, r3, #10
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40014000 	.word	0x40014000

08002934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f023 0201 	bic.w	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f023 030a 	bic.w	r3, r3, #10
 8002970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002992:	b480      	push	{r7}
 8002994:	b087      	sub	sp, #28
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 0210 	bic.w	r2, r3, #16
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	031b      	lsls	r3, r3, #12
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f043 0307 	orr.w	r3, r3, #7
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e09c      	b.n	8002bb6 <HAL_TIMEx_HallSensor_Init+0x14e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fd fe19 	bl	80006c8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7ff fc0b 	bl	80022c4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2203      	movs	r2, #3
 8002abc:	f7ff fee4 	bl	8002888 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020c 	bic.w	r2, r2, #12
 8002ace:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6999      	ldr	r1, [r3, #24]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002af0:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b00:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b10:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	f023 0307 	bic.w	r3, r3, #7
 8002b24:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0204 	orr.w	r2, r2, #4
 8002b34:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8002b3e:	2370      	movs	r3, #112	; 0x70
 8002b40:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f107 020c 	add.w	r2, r7, #12
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fc90 	bl	8002484 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b72:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8002b82:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e04f      	b.n	8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d004      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40014000 	.word	0x40014000

08002c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e060      	b.n	8002d6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d115      	bne.n	8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	051b      	lsls	r3, r3, #20
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40012c00 	.word	0x40012c00

08002d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <__NVIC_SetPriority>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	; (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	; (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e10:	2100      	movs	r1, #0
 8002e12:	f06f 0004 	mvn.w	r0, #4
 8002e16:	f7ff ffcf 	bl	8002db8 <__NVIC_SetPriority>
#endif
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e26:	f3ef 8305 	mrs	r3, IPSR
 8002e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e32:	f06f 0305 	mvn.w	r3, #5
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	e00c      	b.n	8002e54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <osKernelInitialize+0x44>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <osKernelInitialize+0x44>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	e002      	b.n	8002e54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e54:	687b      	ldr	r3, [r7, #4]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	2000011c 	.word	0x2000011c

08002e68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e6e:	f3ef 8305 	mrs	r3, IPSR
 8002e72:	603b      	str	r3, [r7, #0]
  return(result);
 8002e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e7a:	f06f 0305 	mvn.w	r3, #5
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	e010      	b.n	8002ea4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <osKernelStart+0x48>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d109      	bne.n	8002e9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e8a:	f7ff ffbf 	bl	8002e0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <osKernelStart+0x48>)
 8002e90:	2202      	movs	r2, #2
 8002e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e94:	f001 f87c 	bl	8003f90 <vTaskStartScheduler>
      stat = osOK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	e002      	b.n	8002ea4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ea4:	687b      	ldr	r3, [r7, #4]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000011c 	.word	0x2000011c

08002eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af04      	add	r7, sp, #16
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ec4:	f3ef 8305 	mrs	r3, IPSR
 8002ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8002eca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d17e      	bne.n	8002fce <osThreadNew+0x11a>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d07b      	beq.n	8002fce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002eda:	2318      	movs	r3, #24
 8002edc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d045      	beq.n	8002f7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <osThreadNew+0x48>
        name = attr->name;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <osThreadNew+0x6e>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b38      	cmp	r3, #56	; 0x38
 8002f14:	d805      	bhi.n	8002f22 <osThreadNew+0x6e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <osThreadNew+0x72>
        return (NULL);
 8002f22:	2300      	movs	r3, #0
 8002f24:	e054      	b.n	8002fd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <osThreadNew+0xa8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2ba7      	cmp	r3, #167	; 0xa7
 8002f44:	d90a      	bls.n	8002f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <osThreadNew+0xa8>
        mem = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e010      	b.n	8002f7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <osThreadNew+0xca>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d108      	bne.n	8002f7e <osThreadNew+0xca>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <osThreadNew+0xca>
          mem = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e001      	b.n	8002f7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d110      	bne.n	8002fa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f8c:	9202      	str	r2, [sp, #8]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fe0c 	bl	8003bb8 <xTaskCreateStatic>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	e013      	b.n	8002fce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d110      	bne.n	8002fce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fe57 	bl	8003c72 <xTaskCreate>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <osThreadNew+0x11a>
            hTask = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fce:	693b      	ldr	r3, [r7, #16]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3728      	adds	r7, #40	; 0x28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe0:	f3ef 8305 	mrs	r3, IPSR
 8002fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <osDelay+0x1c>
    stat = osErrorISR;
 8002fec:	f06f 0305 	mvn.w	r3, #5
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e007      	b.n	8003004 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 ff92 	bl	8003f28 <vTaskDelay>
    }
  }

  return (stat);
 8003004:	68fb      	ldr	r3, [r7, #12]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <vApplicationGetIdleTaskMemory+0x2c>)
 8003020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <vApplicationGetIdleTaskMemory+0x30>)
 8003026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000120 	.word	0x20000120
 8003040:	200001c8 	.word	0x200001c8

08003044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <vApplicationGetTimerTaskMemory+0x2c>)
 8003054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <vApplicationGetTimerTaskMemory+0x30>)
 800305a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	200003c8 	.word	0x200003c8
 8003074:	20000470 	.word	0x20000470

08003078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f103 0208 	add.w	r2, r3, #8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 0208 	add.w	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d103      	bne.n	800313a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e00c      	b.n	8003154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3308      	adds	r3, #8
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e002      	b.n	8003148 <vListInsert+0x2e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d2f6      	bcs.n	8003142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6892      	ldr	r2, [r2, #8]
 80031a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6852      	ldr	r2, [r2, #4]
 80031ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d103      	bne.n	80031c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1e5a      	subs	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800320a:	f002 f87b 	bl	8005304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	3b01      	subs	r3, #1
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	22ff      	movs	r2, #255	; 0xff
 800324e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d114      	bne.n	800328a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01a      	beq.n	800329e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3310      	adds	r3, #16
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f929 	bl	80044c4 <xTaskRemoveFromEventList>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <xQueueGenericReset+0xcc>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	e009      	b.n	800329e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3310      	adds	r3, #16
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fef2 	bl	8003078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3324      	adds	r3, #36	; 0x24
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff feed 	bl	8003078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800329e:	f002 f861 	bl	8005364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <xQueueGenericCreateStatic+0x52>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <xQueueGenericCreateStatic+0x56>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xQueueGenericCreateStatic+0x58>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	623b      	str	r3, [r7, #32]
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <xQueueGenericCreateStatic+0x7e>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <xQueueGenericCreateStatic+0x82>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueGenericCreateStatic+0x84>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61fb      	str	r3, [r7, #28]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800334e:	2350      	movs	r3, #80	; 0x50
 8003350:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d00a      	beq.n	800336e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	61bb      	str	r3, [r7, #24]
}
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800336e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003382:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f805 	bl	80033a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003398:	4618      	mov	r0, r3
 800339a:	3730      	adds	r7, #48	; 0x30
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e002      	b.n	80033c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ce:	2101      	movs	r1, #1
 80033d0:	69b8      	ldr	r0, [r7, #24]
 80033d2:	f7ff ff05 	bl	80031e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	; 0x38
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueGenericSend+0x32>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <xQueueGenericSend+0x40>
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <xQueueGenericSend+0x44>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <xQueueGenericSend+0x46>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <xQueueGenericSend+0x60>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <xQueueGenericSend+0x6e>
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <xQueueGenericSend+0x72>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <xQueueGenericSend+0x74>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xQueueGenericSend+0x8e>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	623b      	str	r3, [r7, #32]
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003476:	f001 f9e7 	bl	8004848 <xTaskGetSchedulerState>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <xQueueGenericSend+0x9e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xQueueGenericSend+0xa2>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueGenericSend+0xa4>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	61fb      	str	r3, [r7, #28]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034a6:	f001 ff2d 	bl	8005304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <xQueueGenericSend+0xd4>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d129      	bne.n	8003510 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c2:	f000 fa0b 	bl	80038dc <prvCopyDataToQueue>
 80034c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	3324      	adds	r3, #36	; 0x24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fff5 	bl	80044c4 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <xQueueGenericSend+0x1f8>)
 80034e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	e00a      	b.n	8003508 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <xQueueGenericSend+0x1f8>)
 80034fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003508:	f001 ff2c 	bl	8005364 <vPortExitCritical>
				return pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	e063      	b.n	80035d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003516:	f001 ff25 	bl	8005364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800351a:	2300      	movs	r3, #0
 800351c:	e05c      	b.n	80035d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f82f 	bl	800458c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003532:	f001 ff17 	bl	8005364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003536:	f000 fd9b 	bl	8004070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800353a:	f001 fee3 	bl	8005304 <vPortEnterCritical>
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003544:	b25b      	sxtb	r3, r3
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d103      	bne.n	8003554 <xQueueGenericSend+0x16c>
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355a:	b25b      	sxtb	r3, r3
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d103      	bne.n	800356a <xQueueGenericSend+0x182>
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356a:	f001 fefb 	bl	8005364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800356e:	1d3a      	adds	r2, r7, #4
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f81e 	bl	80045b8 <xTaskCheckForTimeOut>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d124      	bne.n	80035cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003584:	f000 faa2 	bl	8003acc <prvIsQueueFull>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	3310      	adds	r3, #16
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ff44 	bl	8004424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800359c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800359e:	f000 fa2d 	bl	80039fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035a2:	f000 fd73 	bl	800408c <xTaskResumeAll>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af7c 	bne.w	80034a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <xQueueGenericSend+0x1f8>)
 80035b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	e772      	b.n	80034a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c2:	f000 fa1b 	bl	80039fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035c6:	f000 fd61 	bl	800408c <xTaskResumeAll>
 80035ca:	e76c      	b.n	80034a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ce:	f000 fa15 	bl	80039fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035d2:	f000 fd5b 	bl	800408c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3738      	adds	r7, #56	; 0x38
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b090      	sub	sp, #64	; 0x40
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <xQueueGenericSendFromISR+0x3c>
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <xQueueGenericSendFromISR+0x40>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <xQueueGenericSendFromISR+0x42>
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d103      	bne.n	800364e <xQueueGenericSendFromISR+0x6a>
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <xQueueGenericSendFromISR+0x6e>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <xQueueGenericSendFromISR+0x70>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	623b      	str	r3, [r7, #32]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800366e:	f001 ff2b 	bl	80054c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003672:	f3ef 8211 	mrs	r2, BASEPRI
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	61fa      	str	r2, [r7, #28]
 8003688:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800368a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <xQueueGenericSendFromISR+0xbc>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d12f      	bne.n	8003700 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036b6:	f000 f911 	bl	80038dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d112      	bne.n	80036ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d016      	beq.n	80036fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	3324      	adds	r3, #36	; 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fef7 	bl	80044c4 <xTaskRemoveFromEventList>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e007      	b.n	80036fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	b25a      	sxtb	r2, r3
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036fa:	2301      	movs	r3, #1
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80036fe:	e001      	b.n	8003704 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003700:	2300      	movs	r3, #0
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800370e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003712:	4618      	mov	r0, r3
 8003714:	3740      	adds	r7, #64	; 0x40
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <xQueueReceive+0x30>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	623b      	str	r3, [r7, #32]
}
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <xQueueReceive+0x3e>
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <xQueueReceive+0x42>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <xQueueReceive+0x44>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xQueueReceive+0x5e>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	61fb      	str	r3, [r7, #28]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800377a:	f001 f865 	bl	8004848 <xTaskGetSchedulerState>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <xQueueReceive+0x6e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <xQueueReceive+0x72>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <xQueueReceive+0x74>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <xQueueReceive+0x8e>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	61bb      	str	r3, [r7, #24]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037aa:	f001 fdab 	bl	8005304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01f      	beq.n	80037fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037be:	f000 f8f7 	bl	80039b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1e5a      	subs	r2, r3, #1
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	3310      	adds	r3, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fe74 	bl	80044c4 <xTaskRemoveFromEventList>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <xQueueReceive+0x1bc>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037f2:	f001 fdb7 	bl	8005364 <vPortExitCritical>
				return pdPASS;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e069      	b.n	80038ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003800:	f001 fdb0 	bl	8005364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003804:	2300      	movs	r3, #0
 8003806:	e062      	b.n	80038ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800380e:	f107 0310 	add.w	r3, r7, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f000 feba 	bl	800458c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800381c:	f001 fda2 	bl	8005364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003820:	f000 fc26 	bl	8004070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003824:	f001 fd6e 	bl	8005304 <vPortEnterCritical>
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382e:	b25b      	sxtb	r3, r3
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d103      	bne.n	800383e <xQueueReceive+0x122>
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003844:	b25b      	sxtb	r3, r3
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d103      	bne.n	8003854 <xQueueReceive+0x138>
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003854:	f001 fd86 	bl	8005364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003858:	1d3a      	adds	r2, r7, #4
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fea9 	bl	80045b8 <xTaskCheckForTimeOut>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d123      	bne.n	80038b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800386c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386e:	f000 f917 	bl	8003aa0 <prvIsQueueEmpty>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	3324      	adds	r3, #36	; 0x24
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fdcf 	bl	8004424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003888:	f000 f8b8 	bl	80039fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800388c:	f000 fbfe 	bl	800408c <xTaskResumeAll>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d189      	bne.n	80037aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <xQueueReceive+0x1bc>)
 8003898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	e780      	b.n	80037aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038aa:	f000 f8a7 	bl	80039fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ae:	f000 fbed 	bl	800408c <xTaskResumeAll>
 80038b2:	e77a      	b.n	80037aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b6:	f000 f8a1 	bl	80039fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ba:	f000 fbe7 	bl	800408c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c0:	f000 f8ee 	bl	8003aa0 <prvIsQueueEmpty>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f43f af6f 	beq.w	80037aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3730      	adds	r7, #48	; 0x30
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14d      	bne.n	800399e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 ffbc 	bl	8004884 <xTaskPriorityDisinherit>
 800390c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e043      	b.n	800399e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d119      	bne.n	8003950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6858      	ldr	r0, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	461a      	mov	r2, r3
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	f002 f87c 	bl	8005a24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d32b      	bcc.n	800399e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e026      	b.n	800399e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68d8      	ldr	r0, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	461a      	mov	r2, r3
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	f002 f862 	bl	8005a24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	425b      	negs	r3, r3
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d207      	bcs.n	800398c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	425b      	negs	r3, r3
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d105      	bne.n	800399e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3b01      	subs	r3, #1
 800399c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d303      	bcc.n	80039e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	461a      	mov	r2, r3
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f002 f818 	bl	8005a24 <memcpy>
	}
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a04:	f001 fc7e 	bl	8005304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a10:	e011      	b.n	8003a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd50 	bl	80044c4 <xTaskRemoveFromEventList>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a2a:	f000 fe27 	bl	800467c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dce9      	bgt.n	8003a12 <prvUnlockQueue+0x16>
 8003a3e:	e000      	b.n	8003a42 <prvUnlockQueue+0x46>
					break;
 8003a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a4a:	f001 fc8b 	bl	8005364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a4e:	f001 fc59 	bl	8005304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a5a:	e011      	b.n	8003a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3310      	adds	r3, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd2b 	bl	80044c4 <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a74:	f000 fe02 	bl	800467c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a78:	7bbb      	ldrb	r3, [r7, #14]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dce9      	bgt.n	8003a5c <prvUnlockQueue+0x60>
 8003a88:	e000      	b.n	8003a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a94:	f001 fc66 	bl	8005364 <vPortExitCritical>
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aa8:	f001 fc2c 	bl	8005304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e001      	b.n	8003abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003abe:	f001 fc51 	bl	8005364 <vPortExitCritical>

	return xReturn;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ad4:	f001 fc16 	bl	8005304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d102      	bne.n	8003aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e001      	b.n	8003aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aee:	f001 fc39 	bl	8005364 <vPortExitCritical>

	return xReturn;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e014      	b.n	8003b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <vQueueAddToRegistry+0x50>)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b18:	490c      	ldr	r1, [pc, #48]	; (8003b4c <vQueueAddToRegistry+0x50>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <vQueueAddToRegistry+0x50>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b2e:	e006      	b.n	8003b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d9e7      	bls.n	8003b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000870 	.word	0x20000870

08003b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b60:	f001 fbd0 	bl	8005304 <vPortEnterCritical>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d103      	bne.n	8003b7a <vQueueWaitForMessageRestricted+0x2a>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b80:	b25b      	sxtb	r3, r3
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d103      	bne.n	8003b90 <vQueueWaitForMessageRestricted+0x40>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b90:	f001 fbe8 	bl	8005364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	3324      	adds	r3, #36	; 0x24
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fc61 	bl	800446c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff26 	bl	80039fc <prvUnlockQueue>
	}
 8003bb0:	bf00      	nop
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08e      	sub	sp, #56	; 0x38
 8003bbc:	af04      	add	r7, sp, #16
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	623b      	str	r3, [r7, #32]
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xTaskCreateStatic+0x46>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	61fb      	str	r3, [r7, #28]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bfe:	23a8      	movs	r3, #168	; 0xa8
 8003c00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2ba8      	cmp	r3, #168	; 0xa8
 8003c06:	d00a      	beq.n	8003c1e <xTaskCreateStatic+0x66>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	61bb      	str	r3, [r7, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01e      	beq.n	8003c64 <xTaskCreateStatic+0xac>
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9303      	str	r3, [sp, #12]
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	9302      	str	r3, [sp, #8]
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f850 	bl	8003cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c5e:	f000 f8f3 	bl	8003e48 <prvAddNewTaskToReadyList>
 8003c62:	e001      	b.n	8003c68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c68:	697b      	ldr	r3, [r7, #20]
	}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3728      	adds	r7, #40	; 0x28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08c      	sub	sp, #48	; 0x30
 8003c76:	af04      	add	r7, sp, #16
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 fc5e 	bl	8005548 <pvPortMalloc>
 8003c8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c94:	20a8      	movs	r0, #168	; 0xa8
 8003c96:	f001 fc57 	bl	8005548 <pvPortMalloc>
 8003c9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ca8:	e005      	b.n	8003cb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f001 fd18 	bl	80056e0 <vPortFree>
 8003cb0:	e001      	b.n	8003cb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d017      	beq.n	8003cec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9303      	str	r3, [sp, #12]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f80e 	bl	8003cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ce0:	69f8      	ldr	r0, [r7, #28]
 8003ce2:	f000 f8b1 	bl	8003e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e002      	b.n	8003cf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	461a      	mov	r2, r3
 8003d14:	21a5      	movs	r1, #165	; 0xa5
 8003d16:	f001 fe01 	bl	800591c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d24:	3b01      	subs	r3, #1
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f023 0307 	bic.w	r3, r3, #7
 8003d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	617b      	str	r3, [r7, #20]
}
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01f      	beq.n	8003d9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	e012      	b.n	8003d86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	7819      	ldrb	r1, [r3, #0]
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3334      	adds	r3, #52	; 0x34
 8003d70:	460a      	mov	r2, r1
 8003d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d006      	beq.n	8003d8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d9e9      	bls.n	8003d60 <prvInitialiseNewTask+0x64>
 8003d8c:	e000      	b.n	8003d90 <prvInitialiseNewTask+0x94>
			{
				break;
 8003d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d98:	e003      	b.n	8003da2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2b37      	cmp	r3, #55	; 0x37
 8003da6:	d901      	bls.n	8003dac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003da8:	2337      	movs	r3, #55	; 0x37
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	2200      	movs	r2, #0
 8003dbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff f978 	bl	80030b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	3318      	adds	r3, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff f973 	bl	80030b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	3354      	adds	r3, #84	; 0x54
 8003dfc:	224c      	movs	r2, #76	; 0x4c
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fd8b 	bl	800591c <memset>
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <prvInitialiseNewTask+0x140>)
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <prvInitialiseNewTask+0x144>)
 8003e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <prvInitialiseNewTask+0x148>)
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	69b8      	ldr	r0, [r7, #24]
 8003e1e:	f001 f941 	bl	80050a4 <pxPortInitialiseStack>
 8003e22:	4602      	mov	r2, r0
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e34:	bf00      	nop
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20001abc 	.word	0x20001abc
 8003e40:	20001b24 	.word	0x20001b24
 8003e44:	20001b8c 	.word	0x20001b8c

08003e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e50:	f001 fa58 	bl	8005304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <prvAddNewTaskToReadyList+0xc4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <prvAddNewTaskToReadyList+0xc4>)
 8003e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <prvAddNewTaskToReadyList+0xc8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e66:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <prvAddNewTaskToReadyList+0xc8>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <prvAddNewTaskToReadyList+0xc4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d110      	bne.n	8003e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e74:	f000 fc26 	bl	80046c4 <prvInitialiseTaskLists>
 8003e78:	e00d      	b.n	8003e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e7a:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <prvAddNewTaskToReadyList+0xcc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <prvAddNewTaskToReadyList+0xc8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d802      	bhi.n	8003e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <prvAddNewTaskToReadyList+0xc8>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <prvAddNewTaskToReadyList+0xd0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <prvAddNewTaskToReadyList+0xd0>)
 8003e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <prvAddNewTaskToReadyList+0xd0>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <prvAddNewTaskToReadyList+0xd4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d903      	bls.n	8003ebc <prvAddNewTaskToReadyList+0x74>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <prvAddNewTaskToReadyList+0xd4>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <prvAddNewTaskToReadyList+0xd8>)
 8003eca:	441a      	add	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7ff f8fd 	bl	80030d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ed8:	f001 fa44 	bl	8005364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <prvAddNewTaskToReadyList+0xcc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvAddNewTaskToReadyList+0xc8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d207      	bcs.n	8003f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <prvAddNewTaskToReadyList+0xdc>)
 8003ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000d84 	.word	0x20000d84
 8003f10:	200008b0 	.word	0x200008b0
 8003f14:	20000d90 	.word	0x20000d90
 8003f18:	20000da0 	.word	0x20000da0
 8003f1c:	20000d8c 	.word	0x20000d8c
 8003f20:	200008b4 	.word	0x200008b4
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d017      	beq.n	8003f6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <vTaskDelay+0x60>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <vTaskDelay+0x30>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	60bb      	str	r3, [r7, #8]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f58:	f000 f88a 	bl	8004070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fcfe 	bl	8004960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f64:	f000 f892 	bl	800408c <xTaskResumeAll>
 8003f68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <vTaskDelay+0x64>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000dac 	.word	0x20000dac
 8003f8c:	e000ed04 	.word	0xe000ed04

08003f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f9e:	463a      	mov	r2, r7
 8003fa0:	1d39      	adds	r1, r7, #4
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f832 	bl	8003010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	9202      	str	r2, [sp, #8]
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	460a      	mov	r2, r1
 8003fbe:	4924      	ldr	r1, [pc, #144]	; (8004050 <vTaskStartScheduler+0xc0>)
 8003fc0:	4824      	ldr	r0, [pc, #144]	; (8004054 <vTaskStartScheduler+0xc4>)
 8003fc2:	f7ff fdf9 	bl	8003bb8 <xTaskCreateStatic>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a23      	ldr	r2, [pc, #140]	; (8004058 <vTaskStartScheduler+0xc8>)
 8003fca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fcc:	4b22      	ldr	r3, [pc, #136]	; (8004058 <vTaskStartScheduler+0xc8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e001      	b.n	8003fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d102      	bne.n	8003fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fe4:	f000 fd10 	bl	8004a08 <xTimerCreateTimerTask>
 8003fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d11b      	bne.n	8004028 <vTaskStartScheduler+0x98>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	613b      	str	r3, [r7, #16]
}
 8004002:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <vTaskStartScheduler+0xcc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3354      	adds	r3, #84	; 0x54
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <vTaskStartScheduler+0xd0>)
 800400c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <vTaskStartScheduler+0xd4>)
 8004010:	f04f 32ff 	mov.w	r2, #4294967295
 8004014:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <vTaskStartScheduler+0xd8>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <vTaskStartScheduler+0xdc>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004022:	f001 f8cd 	bl	80051c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004026:	e00e      	b.n	8004046 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d10a      	bne.n	8004046 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <vTaskStartScheduler+0xb4>
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08005b14 	.word	0x08005b14
 8004054:	08004695 	.word	0x08004695
 8004058:	20000da8 	.word	0x20000da8
 800405c:	200008b0 	.word	0x200008b0
 8004060:	2000005c 	.word	0x2000005c
 8004064:	20000da4 	.word	0x20000da4
 8004068:	20000d90 	.word	0x20000d90
 800406c:	20000d88 	.word	0x20000d88

08004070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <vTaskSuspendAll+0x18>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	4a03      	ldr	r2, [pc, #12]	; (8004088 <vTaskSuspendAll+0x18>)
 800407c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000dac 	.word	0x20000dac

0800408c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800409a:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <xTaskResumeAll+0x118>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	603b      	str	r3, [r7, #0]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040b8:	f001 f924 	bl	8005304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <xTaskResumeAll+0x118>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <xTaskResumeAll+0x118>)
 80040c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c6:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <xTaskResumeAll+0x118>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d162      	bne.n	8004194 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <xTaskResumeAll+0x11c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d05e      	beq.n	8004194 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040d6:	e02f      	b.n	8004138 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <xTaskResumeAll+0x120>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3318      	adds	r3, #24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f851 	bl	800318c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f84c 	bl	800318c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <xTaskResumeAll+0x124>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d903      	bls.n	8004108 <xTaskResumeAll+0x7c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <xTaskResumeAll+0x124>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <xTaskResumeAll+0x128>)
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7fe ffd7 	bl	80030d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <xTaskResumeAll+0x12c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <xTaskResumeAll+0x130>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <xTaskResumeAll+0x120>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1cb      	bne.n	80040d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004146:	f000 fb5f 	bl	8004808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <xTaskResumeAll+0x134>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004156:	f000 f847 	bl	80041e8 <xTaskIncrementTick>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <xTaskResumeAll+0x130>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3b01      	subs	r3, #1
 800416a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f1      	bne.n	8004156 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <xTaskResumeAll+0x134>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <xTaskResumeAll+0x130>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <xTaskResumeAll+0x138>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004194:	f001 f8e6 	bl	8005364 <vPortExitCritical>

	return xAlreadyYielded;
 8004198:	68bb      	ldr	r3, [r7, #8]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000dac 	.word	0x20000dac
 80041a8:	20000d84 	.word	0x20000d84
 80041ac:	20000d44 	.word	0x20000d44
 80041b0:	20000d8c 	.word	0x20000d8c
 80041b4:	200008b4 	.word	0x200008b4
 80041b8:	200008b0 	.word	0x200008b0
 80041bc:	20000d98 	.word	0x20000d98
 80041c0:	20000d94 	.word	0x20000d94
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <xTaskGetTickCount+0x1c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041d4:	687b      	ldr	r3, [r7, #4]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000d88 	.word	0x20000d88

080041e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f2:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <xTaskIncrementTick+0x148>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 808f 	bne.w	800431a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041fc:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <xTaskIncrementTick+0x14c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004204:	4a4b      	ldr	r2, [pc, #300]	; (8004334 <xTaskIncrementTick+0x14c>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d120      	bne.n	8004252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004210:	4b49      	ldr	r3, [pc, #292]	; (8004338 <xTaskIncrementTick+0x150>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <xTaskIncrementTick+0x48>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	603b      	str	r3, [r7, #0]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xTaskIncrementTick+0x46>
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <xTaskIncrementTick+0x150>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b41      	ldr	r3, [pc, #260]	; (800433c <xTaskIncrementTick+0x154>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <xTaskIncrementTick+0x150>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4a3f      	ldr	r2, [pc, #252]	; (800433c <xTaskIncrementTick+0x154>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <xTaskIncrementTick+0x158>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <xTaskIncrementTick+0x158>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	f000 fadb 	bl	8004808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004252:	4b3c      	ldr	r3, [pc, #240]	; (8004344 <xTaskIncrementTick+0x15c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d349      	bcc.n	80042f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425c:	4b36      	ldr	r3, [pc, #216]	; (8004338 <xTaskIncrementTick+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <xTaskIncrementTick+0x15c>)
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	601a      	str	r2, [r3, #0]
					break;
 800426e:	e03f      	b.n	80042f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <xTaskIncrementTick+0x150>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d203      	bcs.n	8004290 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004288:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <xTaskIncrementTick+0x15c>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800428e:	e02f      	b.n	80042f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe ff79 	bl	800318c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe ff70 	bl	800318c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <xTaskIncrementTick+0x160>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d903      	bls.n	80042c0 <xTaskIncrementTick+0xd8>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <xTaskIncrementTick+0x160>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <xTaskIncrementTick+0x164>)
 80042ce:	441a      	add	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7fe fefb 	bl	80030d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <xTaskIncrementTick+0x168>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b8      	bcc.n	800425c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ee:	e7b5      	b.n	800425c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <xTaskIncrementTick+0x168>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4915      	ldr	r1, [pc, #84]	; (800434c <xTaskIncrementTick+0x164>)
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d901      	bls.n	800430c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800430c:	4b11      	ldr	r3, [pc, #68]	; (8004354 <xTaskIncrementTick+0x16c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e004      	b.n	8004324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <xTaskIncrementTick+0x170>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <xTaskIncrementTick+0x170>)
 8004322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000dac 	.word	0x20000dac
 8004334:	20000d88 	.word	0x20000d88
 8004338:	20000d3c 	.word	0x20000d3c
 800433c:	20000d40 	.word	0x20000d40
 8004340:	20000d9c 	.word	0x20000d9c
 8004344:	20000da4 	.word	0x20000da4
 8004348:	20000d8c 	.word	0x20000d8c
 800434c:	200008b4 	.word	0x200008b4
 8004350:	200008b0 	.word	0x200008b0
 8004354:	20000d98 	.word	0x20000d98
 8004358:	20000d94 	.word	0x20000d94

0800435c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <vTaskSwitchContext+0xb0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <vTaskSwitchContext+0xb4>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004370:	e046      	b.n	8004400 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <vTaskSwitchContext+0xb4>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b26      	ldr	r3, [pc, #152]	; (8004414 <vTaskSwitchContext+0xb8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e010      	b.n	80043a2 <vTaskSwitchContext+0x46>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <vTaskSwitchContext+0x40>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	607b      	str	r3, [r7, #4]
}
 8004398:	bf00      	nop
 800439a:	e7fe      	b.n	800439a <vTaskSwitchContext+0x3e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	491d      	ldr	r1, [pc, #116]	; (8004418 <vTaskSwitchContext+0xbc>)
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0e4      	beq.n	8004380 <vTaskSwitchContext+0x24>
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <vTaskSwitchContext+0xbc>)
 80043c2:	4413      	add	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3308      	adds	r3, #8
 80043d8:	429a      	cmp	r2, r3
 80043da:	d104      	bne.n	80043e6 <vTaskSwitchContext+0x8a>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a0b      	ldr	r2, [pc, #44]	; (800441c <vTaskSwitchContext+0xc0>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4a08      	ldr	r2, [pc, #32]	; (8004414 <vTaskSwitchContext+0xb8>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <vTaskSwitchContext+0xc0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3354      	adds	r3, #84	; 0x54
 80043fc:	4a08      	ldr	r2, [pc, #32]	; (8004420 <vTaskSwitchContext+0xc4>)
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20000dac 	.word	0x20000dac
 8004410:	20000d98 	.word	0x20000d98
 8004414:	20000d8c 	.word	0x20000d8c
 8004418:	200008b4 	.word	0x200008b4
 800441c:	200008b0 	.word	0x200008b0
 8004420:	2000005c 	.word	0x2000005c

08004424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <vTaskPlaceOnEventList+0x44>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3318      	adds	r3, #24
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fe fe61 	bl	800311a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004458:	2101      	movs	r1, #1
 800445a:	6838      	ldr	r0, [r7, #0]
 800445c:	f000 fa80 	bl	8004960 <prvAddCurrentTaskToDelayedList>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200008b0 	.word	0x200008b0

0800446c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3318      	adds	r3, #24
 800449a:	4619      	mov	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fe fe18 	bl	80030d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	68b8      	ldr	r0, [r7, #8]
 80044b2:	f000 fa55 	bl	8004960 <prvAddCurrentTaskToDelayedList>
	}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200008b0 	.word	0x200008b0

080044c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60fb      	str	r3, [r7, #12]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3318      	adds	r3, #24
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe fe49 	bl	800318c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <xTaskRemoveFromEventList+0xb0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11d      	bne.n	800453e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fe40 	bl	800318c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <xTaskRemoveFromEventList+0xb4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d903      	bls.n	8004520 <xTaskRemoveFromEventList+0x5c>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <xTaskRemoveFromEventList+0xb4>)
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <xTaskRemoveFromEventList+0xb8>)
 800452e:	441a      	add	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe fdcb 	bl	80030d2 <vListInsertEnd>
 800453c:	e005      	b.n	800454a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3318      	adds	r3, #24
 8004542:	4619      	mov	r1, r3
 8004544:	480e      	ldr	r0, [pc, #56]	; (8004580 <xTaskRemoveFromEventList+0xbc>)
 8004546:	f7fe fdc4 	bl	80030d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <xTaskRemoveFromEventList+0xc0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	429a      	cmp	r2, r3
 8004556:	d905      	bls.n	8004564 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <xTaskRemoveFromEventList+0xc4>)
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e001      	b.n	8004568 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004568:	697b      	ldr	r3, [r7, #20]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000dac 	.word	0x20000dac
 8004578:	20000d8c 	.word	0x20000d8c
 800457c:	200008b4 	.word	0x200008b4
 8004580:	20000d44 	.word	0x20000d44
 8004584:	200008b0 	.word	0x200008b0
 8004588:	20000d98 	.word	0x20000d98

0800458c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <vTaskInternalSetTimeOutState+0x24>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <vTaskInternalSetTimeOutState+0x28>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	605a      	str	r2, [r3, #4]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000d9c 	.word	0x20000d9c
 80045b4:	20000d88 	.word	0x20000d88

080045b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	613b      	str	r3, [r7, #16]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045fa:	f000 fe83 	bl	8005304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <xTaskCheckForTimeOut+0xbc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d102      	bne.n	800461e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	e023      	b.n	8004666 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <xTaskCheckForTimeOut+0xc0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d007      	beq.n	800463a <xTaskCheckForTimeOut+0x82>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e015      	b.n	8004666 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	429a      	cmp	r2, r3
 8004642:	d20b      	bcs.n	800465c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff9b 	bl	800458c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e004      	b.n	8004666 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004666:	f000 fe7d 	bl	8005364 <vPortExitCritical>

	return xReturn;
 800466a:	69fb      	ldr	r3, [r7, #28]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000d88 	.word	0x20000d88
 8004678:	20000d9c 	.word	0x20000d9c

0800467c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <vTaskMissedYield+0x14>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000d98 	.word	0x20000d98

08004694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800469c:	f000 f852 	bl	8004744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <prvIdleTask+0x28>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d9f9      	bls.n	800469c <prvIdleTask+0x8>
			{
				taskYIELD();
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <prvIdleTask+0x2c>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046b8:	e7f0      	b.n	800469c <prvIdleTask+0x8>
 80046ba:	bf00      	nop
 80046bc:	200008b4 	.word	0x200008b4
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	e00c      	b.n	80046ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <prvInitialiseTaskLists+0x60>)
 80046dc:	4413      	add	r3, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fcca 	bl	8003078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3301      	adds	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b37      	cmp	r3, #55	; 0x37
 80046ee:	d9ef      	bls.n	80046d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046f0:	480d      	ldr	r0, [pc, #52]	; (8004728 <prvInitialiseTaskLists+0x64>)
 80046f2:	f7fe fcc1 	bl	8003078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046f6:	480d      	ldr	r0, [pc, #52]	; (800472c <prvInitialiseTaskLists+0x68>)
 80046f8:	f7fe fcbe 	bl	8003078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <prvInitialiseTaskLists+0x6c>)
 80046fe:	f7fe fcbb 	bl	8003078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004702:	480c      	ldr	r0, [pc, #48]	; (8004734 <prvInitialiseTaskLists+0x70>)
 8004704:	f7fe fcb8 	bl	8003078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004708:	480b      	ldr	r0, [pc, #44]	; (8004738 <prvInitialiseTaskLists+0x74>)
 800470a:	f7fe fcb5 	bl	8003078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <prvInitialiseTaskLists+0x78>)
 8004710:	4a05      	ldr	r2, [pc, #20]	; (8004728 <prvInitialiseTaskLists+0x64>)
 8004712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <prvInitialiseTaskLists+0x7c>)
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <prvInitialiseTaskLists+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200008b4 	.word	0x200008b4
 8004728:	20000d14 	.word	0x20000d14
 800472c:	20000d28 	.word	0x20000d28
 8004730:	20000d44 	.word	0x20000d44
 8004734:	20000d58 	.word	0x20000d58
 8004738:	20000d70 	.word	0x20000d70
 800473c:	20000d3c 	.word	0x20000d3c
 8004740:	20000d40 	.word	0x20000d40

08004744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800474a:	e019      	b.n	8004780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800474c:	f000 fdda 	bl	8005304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <prvCheckTasksWaitingTermination+0x50>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fd15 	bl	800318c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <prvCheckTasksWaitingTermination+0x54>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3b01      	subs	r3, #1
 8004768:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <prvCheckTasksWaitingTermination+0x54>)
 800476a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <prvCheckTasksWaitingTermination+0x58>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <prvCheckTasksWaitingTermination+0x58>)
 8004774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004776:	f000 fdf5 	bl	8005364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f810 	bl	80047a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <prvCheckTasksWaitingTermination+0x58>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e1      	bne.n	800474c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000d58 	.word	0x20000d58
 8004798:	20000d84 	.word	0x20000d84
 800479c:	20000d6c 	.word	0x20000d6c

080047a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3354      	adds	r3, #84	; 0x54
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f8bd 	bl	800592c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 ff8d 	bl	80056e0 <vPortFree>
				vPortFree( pxTCB );
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 ff8a 	bl	80056e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047cc:	e018      	b.n	8004800 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d103      	bne.n	80047e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 ff81 	bl	80056e0 <vPortFree>
	}
 80047de:	e00f      	b.n	8004800 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d00a      	beq.n	8004800 <prvDeleteTCB+0x60>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60fb      	str	r3, [r7, #12]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvDeleteTCB+0x5e>
	}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <prvResetNextTaskUnblockTime+0x38>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <prvResetNextTaskUnblockTime+0x3c>)
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004820:	e008      	b.n	8004834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <prvResetNextTaskUnblockTime+0x38>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <prvResetNextTaskUnblockTime+0x3c>)
 8004832:	6013      	str	r3, [r2, #0]
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000d3c 	.word	0x20000d3c
 8004844:	20000da4 	.word	0x20000da4

08004848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <xTaskGetSchedulerState+0x34>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004856:	2301      	movs	r3, #1
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	e008      	b.n	800486e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <xTaskGetSchedulerState+0x38>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004864:	2302      	movs	r3, #2
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	e001      	b.n	800486e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800486e:	687b      	ldr	r3, [r7, #4]
	}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000d90 	.word	0x20000d90
 8004880:	20000dac 	.word	0x20000dac

08004884 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d056      	beq.n	8004948 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <xTaskPriorityDisinherit+0xd0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d00a      	beq.n	80048ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60bb      	str	r3, [r7, #8]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	1e5a      	subs	r2, r3, #1
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d02c      	beq.n	8004948 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d128      	bne.n	8004948 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fc46 	bl	800318c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <xTaskPriorityDisinherit+0xd4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d903      	bls.n	8004928 <xTaskPriorityDisinherit+0xa4>
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <xTaskPriorityDisinherit+0xd4>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <xTaskPriorityDisinherit+0xd8>)
 8004936:	441a      	add	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fbc7 	bl	80030d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004948:	697b      	ldr	r3, [r7, #20]
	}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200008b0 	.word	0x200008b0
 8004958:	20000d8c 	.word	0x20000d8c
 800495c:	200008b4 	.word	0x200008b4

08004960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800496a:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3304      	adds	r3, #4
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fc08 	bl	800318c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d10a      	bne.n	800499a <prvAddCurrentTaskToDelayedList+0x3a>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800498a:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4819      	ldr	r0, [pc, #100]	; (80049f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004994:	f7fe fb9d 	bl	80030d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004998:	e026      	b.n	80049e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d209      	bcs.n	80049c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f7fe fbab 	bl	800311a <vListInsert>
}
 80049c4:	e010      	b.n	80049e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049c6:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fe fba1 	bl	800311a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d202      	bcs.n	80049e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000d88 	.word	0x20000d88
 80049f4:	200008b0 	.word	0x200008b0
 80049f8:	20000d70 	.word	0x20000d70
 80049fc:	20000d40 	.word	0x20000d40
 8004a00:	20000d3c 	.word	0x20000d3c
 8004a04:	20000da4 	.word	0x20000da4

08004a08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a12:	f000 fb07 	bl	8005024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <xTimerCreateTimerTask+0x80>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d021      	beq.n	8004a62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a26:	1d3a      	adds	r2, r7, #4
 8004a28:	f107 0108 	add.w	r1, r7, #8
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe fb07 	bl	8003044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	9202      	str	r2, [sp, #8]
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	2302      	movs	r3, #2
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2300      	movs	r3, #0
 8004a46:	460a      	mov	r2, r1
 8004a48:	4910      	ldr	r1, [pc, #64]	; (8004a8c <xTimerCreateTimerTask+0x84>)
 8004a4a:	4811      	ldr	r0, [pc, #68]	; (8004a90 <xTimerCreateTimerTask+0x88>)
 8004a4c:	f7ff f8b4 	bl	8003bb8 <xTaskCreateStatic>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <xTimerCreateTimerTask+0x8c>)
 8004a54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <xTimerCreateTimerTask+0x8c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	613b      	str	r3, [r7, #16]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a7e:	697b      	ldr	r3, [r7, #20]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000de0 	.word	0x20000de0
 8004a8c:	08005b1c 	.word	0x08005b1c
 8004a90:	08004bcd 	.word	0x08004bcd
 8004a94:	20000de4 	.word	0x20000de4

08004a98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	623b      	str	r3, [r7, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <xTimerGenericCommand+0x98>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02a      	beq.n	8004b24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	dc18      	bgt.n	8004b12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ae0:	f7ff feb2 	bl	8004848 <xTaskGetSchedulerState>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d109      	bne.n	8004afe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <xTimerGenericCommand+0x98>)
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f107 0110 	add.w	r1, r7, #16
 8004af2:	2300      	movs	r3, #0
 8004af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af6:	f7fe fc77 	bl	80033e8 <xQueueGenericSend>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24
 8004afc:	e012      	b.n	8004b24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <xTimerGenericCommand+0x98>)
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f107 0110 	add.w	r1, r7, #16
 8004b06:	2300      	movs	r3, #0
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f7fe fc6d 	bl	80033e8 <xQueueGenericSend>
 8004b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8004b10:	e008      	b.n	8004b24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <xTimerGenericCommand+0x98>)
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	f107 0110 	add.w	r1, r7, #16
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	f7fe fd61 	bl	80035e4 <xQueueGenericSendFromISR>
 8004b22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3728      	adds	r7, #40	; 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000de0 	.word	0x20000de0

08004b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b3e:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <prvProcessExpiredTimer+0x94>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe fb1d 	bl	800318c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d022      	beq.n	8004ba6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	699a      	ldr	r2, [r3, #24]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	18d1      	adds	r1, r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	6978      	ldr	r0, [r7, #20]
 8004b6e:	f000 f8d1 	bl	8004d14 <prvInsertTimerInActiveList>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01f      	beq.n	8004bb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	2100      	movs	r1, #0
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff88 	bl	8004a98 <xTimerGenericCommand>
 8004b88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d113      	bne.n	8004bb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	4798      	blx	r3
}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000dd8 	.word	0x20000dd8

08004bcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bd4:	f107 0308 	add.w	r3, r7, #8
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f857 	bl	8004c8c <prvGetNextExpireTime>
 8004bde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4619      	mov	r1, r3
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f803 	bl	8004bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bea:	f000 f8d5 	bl	8004d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bee:	e7f1      	b.n	8004bd4 <prvTimerTask+0x8>

08004bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bfa:	f7ff fa39 	bl	8004070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f866 	bl	8004cd4 <prvSampleTimeNow>
 8004c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d130      	bne.n	8004c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <prvProcessTimerOrBlockTask+0x3c>
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d806      	bhi.n	8004c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c1e:	f7ff fa35 	bl	800408c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff ff85 	bl	8004b34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c2a:	e024      	b.n	8004c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <prvProcessTimerOrBlockTask+0x90>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <prvProcessTimerOrBlockTask+0x50>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <prvProcessTimerOrBlockTask+0x52>
 8004c40:	2300      	movs	r3, #0
 8004c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <prvProcessTimerOrBlockTask+0x94>)
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7fe ff7d 	bl	8003b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c56:	f7ff fa19 	bl	800408c <xTaskResumeAll>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <prvProcessTimerOrBlockTask+0x98>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
}
 8004c70:	e001      	b.n	8004c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c72:	f7ff fa0b 	bl	800408c <xTaskResumeAll>
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000ddc 	.word	0x20000ddc
 8004c84:	20000de0 	.word	0x20000de0
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <prvGetNextExpireTime+0x44>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <prvGetNextExpireTime+0x16>
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	e000      	b.n	8004ca4 <prvGetNextExpireTime+0x18>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <prvGetNextExpireTime+0x44>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e001      	b.n	8004cc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000dd8 	.word	0x20000dd8

08004cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cdc:	f7ff fa74 	bl	80041c8 <xTaskGetTickCount>
 8004ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <prvSampleTimeNow+0x3c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d205      	bcs.n	8004cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cec:	f000 f936 	bl	8004f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cfe:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <prvSampleTimeNow+0x3c>)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000de8 	.word	0x20000de8

08004d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d812      	bhi.n	8004d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	1ad2      	subs	r2, r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d302      	bcc.n	8004d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e01b      	b.n	8004d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <prvInsertTimerInActiveList+0x7c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7fe f9de 	bl	800311a <vListInsert>
 8004d5e:	e012      	b.n	8004d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d206      	bcs.n	8004d76 <prvInsertTimerInActiveList+0x62>
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d302      	bcc.n	8004d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e007      	b.n	8004d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <prvInsertTimerInActiveList+0x80>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7fe f9ca 	bl	800311a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d86:	697b      	ldr	r3, [r7, #20]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000ddc 	.word	0x20000ddc
 8004d94:	20000dd8 	.word	0x20000dd8

08004d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08e      	sub	sp, #56	; 0x38
 8004d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d9e:	e0ca      	b.n	8004f36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da18      	bge.n	8004dd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	3304      	adds	r3, #4
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	61fb      	str	r3, [r7, #28]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dce:	6850      	ldr	r0, [r2, #4]
 8004dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd2:	6892      	ldr	r2, [r2, #8]
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f2c0 80ab 	blt.w	8004f36 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	3304      	adds	r3, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe f9cb 	bl	800318c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df6:	463b      	mov	r3, r7
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff6b 	bl	8004cd4 <prvSampleTimeNow>
 8004dfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b09      	cmp	r3, #9
 8004e04:	f200 8096 	bhi.w	8004f34 <prvProcessReceivedCommands+0x19c>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <prvProcessReceivedCommands+0x78>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e39 	.word	0x08004e39
 8004e1c:	08004ead 	.word	0x08004ead
 8004e20:	08004ec1 	.word	0x08004ec1
 8004e24:	08004f0b 	.word	0x08004f0b
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e39 	.word	0x08004e39
 8004e30:	08004ead 	.word	0x08004ead
 8004e34:	08004ec1 	.word	0x08004ec1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	18d1      	adds	r1, r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e58:	f7ff ff5c 	bl	8004d14 <prvInsertTimerInActiveList>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d069      	beq.n	8004f36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05e      	beq.n	8004f36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	441a      	add	r2, r3
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	2100      	movs	r1, #0
 8004e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8a:	f7ff fe05 	bl	8004a98 <xTimerGenericCommand>
 8004e8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d14f      	bne.n	8004f36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	61bb      	str	r3, [r7, #24]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ebe:	e03a      	b.n	8004f36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	617b      	str	r3, [r7, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	18d1      	adds	r1, r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f04:	f7ff ff06 	bl	8004d14 <prvInsertTimerInActiveList>
					break;
 8004f08:	e015      	b.n	8004f36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f1a:	f000 fbe1 	bl	80056e0 <vPortFree>
 8004f1e:	e00a      	b.n	8004f36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f32:	e000      	b.n	8004f36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004f34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f36:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <prvProcessReceivedCommands+0x1c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	1d39      	adds	r1, r7, #4
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fbec 	bl	800371c <xQueueReceive>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f47f af2a 	bne.w	8004da0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	3730      	adds	r7, #48	; 0x30
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000de0 	.word	0x20000de0

08004f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f62:	e048      	b.n	8004ff6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f64:	4b2d      	ldr	r3, [pc, #180]	; (800501c <prvSwitchTimerLists+0xc0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	; (800501c <prvSwitchTimerLists+0xc0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe f905 	bl	800318c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02e      	beq.n	8004ff6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d90e      	bls.n	8004fc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fb6:	4b19      	ldr	r3, [pc, #100]	; (800501c <prvSwitchTimerLists+0xc0>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe f8aa 	bl	800311a <vListInsert>
 8004fc6:	e016      	b.n	8004ff6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fd60 	bl	8004a98 <xTimerGenericCommand>
 8004fd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	603b      	str	r3, [r7, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <prvSwitchTimerLists+0xc0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1b1      	bne.n	8004f64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <prvSwitchTimerLists+0xc0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <prvSwitchTimerLists+0xc4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <prvSwitchTimerLists+0xc0>)
 800500c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800500e:	4a04      	ldr	r2, [pc, #16]	; (8005020 <prvSwitchTimerLists+0xc4>)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	6013      	str	r3, [r2, #0]
}
 8005014:	bf00      	nop
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000dd8 	.word	0x20000dd8
 8005020:	20000ddc 	.word	0x20000ddc

08005024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800502a:	f000 f96b 	bl	8005304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800502e:	4b15      	ldr	r3, [pc, #84]	; (8005084 <prvCheckForValidListAndQueue+0x60>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d120      	bne.n	8005078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005036:	4814      	ldr	r0, [pc, #80]	; (8005088 <prvCheckForValidListAndQueue+0x64>)
 8005038:	f7fe f81e 	bl	8003078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800503c:	4813      	ldr	r0, [pc, #76]	; (800508c <prvCheckForValidListAndQueue+0x68>)
 800503e:	f7fe f81b 	bl	8003078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <prvCheckForValidListAndQueue+0x6c>)
 8005044:	4a10      	ldr	r2, [pc, #64]	; (8005088 <prvCheckForValidListAndQueue+0x64>)
 8005046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005048:	4b12      	ldr	r3, [pc, #72]	; (8005094 <prvCheckForValidListAndQueue+0x70>)
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <prvCheckForValidListAndQueue+0x68>)
 800504c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800504e:	2300      	movs	r3, #0
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	4b11      	ldr	r3, [pc, #68]	; (8005098 <prvCheckForValidListAndQueue+0x74>)
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <prvCheckForValidListAndQueue+0x78>)
 8005056:	2110      	movs	r1, #16
 8005058:	200a      	movs	r0, #10
 800505a:	f7fe f929 	bl	80032b0 <xQueueGenericCreateStatic>
 800505e:	4603      	mov	r3, r0
 8005060:	4a08      	ldr	r2, [pc, #32]	; (8005084 <prvCheckForValidListAndQueue+0x60>)
 8005062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <prvCheckForValidListAndQueue+0x60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <prvCheckForValidListAndQueue+0x60>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	490b      	ldr	r1, [pc, #44]	; (80050a0 <prvCheckForValidListAndQueue+0x7c>)
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fd42 	bl	8003afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005078:	f000 f974 	bl	8005364 <vPortExitCritical>
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000de0 	.word	0x20000de0
 8005088:	20000db0 	.word	0x20000db0
 800508c:	20000dc4 	.word	0x20000dc4
 8005090:	20000dd8 	.word	0x20000dd8
 8005094:	20000ddc 	.word	0x20000ddc
 8005098:	20000e8c 	.word	0x20000e8c
 800509c:	20000dec 	.word	0x20000dec
 80050a0:	08005b24 	.word	0x08005b24

080050a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b04      	subs	r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3b04      	subs	r3, #4
 80050c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050d4:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <pxPortInitialiseStack+0x64>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3b14      	subs	r3, #20
 80050de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f06f 0202 	mvn.w	r2, #2
 80050f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b20      	subs	r3, #32
 80050f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	0800510d 	.word	0x0800510d

0800510c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <prvTaskExitError+0x54>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d00a      	beq.n	8005136 <prvTaskExitError+0x2a>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60fb      	str	r3, [r7, #12]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <prvTaskExitError+0x28>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60bb      	str	r3, [r7, #8]
}
 8005148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800514a:	bf00      	nop
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0fc      	beq.n	800514c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	2000000c 	.word	0x2000000c
	...

08005170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005170:	4b07      	ldr	r3, [pc, #28]	; (8005190 <pxCurrentTCBConst2>)
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	6808      	ldr	r0, [r1, #0]
 8005176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517a:	f380 8809 	msr	PSP, r0
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8811 	msr	BASEPRI, r0
 800518a:	4770      	bx	lr
 800518c:	f3af 8000 	nop.w

08005190 <pxCurrentTCBConst2>:
 8005190:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop

08005198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005198:	4808      	ldr	r0, [pc, #32]	; (80051bc <prvPortStartFirstTask+0x24>)
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	6800      	ldr	r0, [r0, #0]
 800519e:	f380 8808 	msr	MSP, r0
 80051a2:	f04f 0000 	mov.w	r0, #0
 80051a6:	f380 8814 	msr	CONTROL, r0
 80051aa:	b662      	cpsie	i
 80051ac:	b661      	cpsie	f
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	df00      	svc	0
 80051b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051ba:	bf00      	nop
 80051bc:	e000ed08 	.word	0xe000ed08

080051c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051c6:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <xPortStartScheduler+0x120>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a46      	ldr	r2, [pc, #280]	; (80052e4 <xPortStartScheduler+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10a      	bne.n	80051e6 <xPortStartScheduler+0x26>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	613b      	str	r3, [r7, #16]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051e6:	4b3e      	ldr	r3, [pc, #248]	; (80052e0 <xPortStartScheduler+0x120>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <xPortStartScheduler+0x128>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10a      	bne.n	8005206 <xPortStartScheduler+0x46>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <xPortStartScheduler+0x12c>)
 8005208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	22ff      	movs	r2, #255	; 0xff
 8005216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005228:	b2da      	uxtb	r2, r3
 800522a:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <xPortStartScheduler+0x130>)
 800522c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800522e:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <xPortStartScheduler+0x134>)
 8005230:	2207      	movs	r2, #7
 8005232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005234:	e009      	b.n	800524a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005236:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <xPortStartScheduler+0x134>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3b01      	subs	r3, #1
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <xPortStartScheduler+0x134>)
 800523e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d0ef      	beq.n	8005236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005256:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <xPortStartScheduler+0x134>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1c3 0307 	rsb	r3, r3, #7
 800525e:	2b04      	cmp	r3, #4
 8005260:	d00a      	beq.n	8005278 <xPortStartScheduler+0xb8>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	60bb      	str	r3, [r7, #8]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005278:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <xPortStartScheduler+0x134>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <xPortStartScheduler+0x134>)
 8005280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <xPortStartScheduler+0x134>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <xPortStartScheduler+0x134>)
 800528c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005296:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <xPortStartScheduler+0x138>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a17      	ldr	r2, [pc, #92]	; (80052f8 <xPortStartScheduler+0x138>)
 800529c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <xPortStartScheduler+0x138>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <xPortStartScheduler+0x138>)
 80052a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80052ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052ae:	f000 f8dd 	bl	800546c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <xPortStartScheduler+0x13c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052b8:	f000 f8fc 	bl	80054b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <xPortStartScheduler+0x140>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <xPortStartScheduler+0x140>)
 80052c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052c8:	f7ff ff66 	bl	8005198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052cc:	f7ff f846 	bl	800435c <vTaskSwitchContext>
	prvTaskExitError();
 80052d0:	f7ff ff1c 	bl	800510c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	e000ed00 	.word	0xe000ed00
 80052e4:	410fc271 	.word	0x410fc271
 80052e8:	410fc270 	.word	0x410fc270
 80052ec:	e000e400 	.word	0xe000e400
 80052f0:	20000edc 	.word	0x20000edc
 80052f4:	20000ee0 	.word	0x20000ee0
 80052f8:	e000ed20 	.word	0xe000ed20
 80052fc:	2000000c 	.word	0x2000000c
 8005300:	e000ef34 	.word	0xe000ef34

08005304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	607b      	str	r3, [r7, #4]
}
 800531c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800531e:	4b0f      	ldr	r3, [pc, #60]	; (800535c <vPortEnterCritical+0x58>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a0d      	ldr	r2, [pc, #52]	; (800535c <vPortEnterCritical+0x58>)
 8005326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <vPortEnterCritical+0x58>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10f      	bne.n	8005350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <vPortEnterCritical+0x5c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <vPortEnterCritical+0x4c>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	603b      	str	r3, [r7, #0]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <vPortEnterCritical+0x4a>
	}
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	2000000c 	.word	0x2000000c
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <vPortExitCritical+0x50>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <vPortExitCritical+0x24>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	607b      	str	r3, [r7, #4]
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <vPortExitCritical+0x50>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3b01      	subs	r3, #1
 800538e:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <vPortExitCritical+0x50>)
 8005390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <vPortExitCritical+0x50>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <vPortExitCritical+0x42>
 800539a:	2300      	movs	r3, #0
 800539c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f383 8811 	msr	BASEPRI, r3
}
 80053a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000000c 	.word	0x2000000c
	...

080053c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053c0:	f3ef 8009 	mrs	r0, PSP
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <pxCurrentTCBConst>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	f01e 0f10 	tst.w	lr, #16
 80053d0:	bf08      	it	eq
 80053d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	6010      	str	r0, [r2, #0]
 80053dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053e4:	f380 8811 	msr	BASEPRI, r0
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f7fe ffb4 	bl	800435c <vTaskSwitchContext>
 80053f4:	f04f 0000 	mov.w	r0, #0
 80053f8:	f380 8811 	msr	BASEPRI, r0
 80053fc:	bc09      	pop	{r0, r3}
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	6808      	ldr	r0, [r1, #0]
 8005402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005406:	f01e 0f10 	tst.w	lr, #16
 800540a:	bf08      	it	eq
 800540c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005410:	f380 8809 	msr	PSP, r0
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	f3af 8000 	nop.w

08005420 <pxCurrentTCBConst>:
 8005420:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop

08005428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	607b      	str	r3, [r7, #4]
}
 8005440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005442:	f7fe fed1 	bl	80041e8 <xTaskIncrementTick>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <xPortSysTickHandler+0x40>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	2300      	movs	r3, #0
 8005456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	f383 8811 	msr	BASEPRI, r3
}
 800545e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <vPortSetupTimerInterrupt+0x34>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <vPortSetupTimerInterrupt+0x38>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <vPortSetupTimerInterrupt+0x3c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <vPortSetupTimerInterrupt+0x40>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	099b      	lsrs	r3, r3, #6
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <vPortSetupTimerInterrupt+0x44>)
 800548a:	3b01      	subs	r3, #1
 800548c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800548e:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <vPortSetupTimerInterrupt+0x34>)
 8005490:	2207      	movs	r2, #7
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000e010 	.word	0xe000e010
 80054a4:	e000e018 	.word	0xe000e018
 80054a8:	20000000 	.word	0x20000000
 80054ac:	10624dd3 	.word	0x10624dd3
 80054b0:	e000e014 	.word	0xe000e014

080054b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054c4 <vPortEnableVFP+0x10>
 80054b8:	6801      	ldr	r1, [r0, #0]
 80054ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054be:	6001      	str	r1, [r0, #0]
 80054c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054c2:	bf00      	nop
 80054c4:	e000ed88 	.word	0xe000ed88

080054c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
 80054d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d914      	bls.n	8005504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <vPortValidateInterruptPriority+0x70>)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <vPortValidateInterruptPriority+0x74>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	7afa      	ldrb	r2, [r7, #11]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d20a      	bcs.n	8005504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	607b      	str	r3, [r7, #4]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005504:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <vPortValidateInterruptPriority+0x78>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <vPortValidateInterruptPriority+0x7c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d90a      	bls.n	800552a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	603b      	str	r3, [r7, #0]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <vPortValidateInterruptPriority+0x60>
	}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	e000e3f0 	.word	0xe000e3f0
 800553c:	20000edc 	.word	0x20000edc
 8005540:	e000ed0c 	.word	0xe000ed0c
 8005544:	20000ee0 	.word	0x20000ee0

08005548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005554:	f7fe fd8c 	bl	8004070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005558:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <pvPortMalloc+0x180>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005560:	f000 f920 	bl	80057a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005564:	4b59      	ldr	r3, [pc, #356]	; (80056cc <pvPortMalloc+0x184>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 8093 	bne.w	8005698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01d      	beq.n	80055b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005578:	2208      	movs	r2, #8
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d014      	beq.n	80055b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f023 0307 	bic.w	r3, r3, #7
 8005590:	3308      	adds	r3, #8
 8005592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <pvPortMalloc+0x6c>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	617b      	str	r3, [r7, #20]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d06e      	beq.n	8005698 <pvPortMalloc+0x150>
 80055ba:	4b45      	ldr	r3, [pc, #276]	; (80056d0 <pvPortMalloc+0x188>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d869      	bhi.n	8005698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055c4:	4b43      	ldr	r3, [pc, #268]	; (80056d4 <pvPortMalloc+0x18c>)
 80055c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055c8:	4b42      	ldr	r3, [pc, #264]	; (80056d4 <pvPortMalloc+0x18c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055ce:	e004      	b.n	80055da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d903      	bls.n	80055ec <pvPortMalloc+0xa4>
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f1      	bne.n	80055d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055ec:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <pvPortMalloc+0x180>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d050      	beq.n	8005698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2208      	movs	r2, #8
 80055fc:	4413      	add	r3, r2
 80055fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	2308      	movs	r3, #8
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	429a      	cmp	r2, r3
 8005616:	d91f      	bls.n	8005658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <pvPortMalloc+0xf8>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	613b      	str	r3, [r7, #16]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1ad2      	subs	r2, r2, r3
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005652:	69b8      	ldr	r0, [r7, #24]
 8005654:	f000 f908 	bl	8005868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <pvPortMalloc+0x188>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <pvPortMalloc+0x188>)
 8005664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005666:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <pvPortMalloc+0x188>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <pvPortMalloc+0x190>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d203      	bcs.n	800567a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005672:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <pvPortMalloc+0x188>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <pvPortMalloc+0x190>)
 8005678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <pvPortMalloc+0x184>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	431a      	orrs	r2, r3
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <pvPortMalloc+0x194>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3301      	adds	r3, #1
 8005694:	4a11      	ldr	r2, [pc, #68]	; (80056dc <pvPortMalloc+0x194>)
 8005696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005698:	f7fe fcf8 	bl	800408c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <pvPortMalloc+0x174>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60fb      	str	r3, [r7, #12]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <pvPortMalloc+0x172>
	return pvReturn;
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3728      	adds	r7, #40	; 0x28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20001aa4 	.word	0x20001aa4
 80056cc:	20001ab8 	.word	0x20001ab8
 80056d0:	20001aa8 	.word	0x20001aa8
 80056d4:	20001a9c 	.word	0x20001a9c
 80056d8:	20001aac 	.word	0x20001aac
 80056dc:	20001ab0 	.word	0x20001ab0

080056e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d04d      	beq.n	800578e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056f2:	2308      	movs	r3, #8
 80056f4:	425b      	negs	r3, r3
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4413      	add	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4b24      	ldr	r3, [pc, #144]	; (8005798 <vPortFree+0xb8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <vPortFree+0x44>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <vPortFree+0x62>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	60bb      	str	r3, [r7, #8]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <vPortFree+0xb8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01e      	beq.n	800578e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11a      	bne.n	800578e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <vPortFree+0xb8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	43db      	mvns	r3, r3
 8005762:	401a      	ands	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005768:	f7fe fc82 	bl	8004070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <vPortFree+0xbc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4413      	add	r3, r2
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <vPortFree+0xbc>)
 8005778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800577a:	6938      	ldr	r0, [r7, #16]
 800577c:	f000 f874 	bl	8005868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005780:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <vPortFree+0xc0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	4a06      	ldr	r2, [pc, #24]	; (80057a0 <vPortFree+0xc0>)
 8005788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800578a:	f7fe fc7f 	bl	800408c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20001ab8 	.word	0x20001ab8
 800579c:	20001aa8 	.word	0x20001aa8
 80057a0:	20001ab4 	.word	0x20001ab4

080057a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80057ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <prvHeapInit+0xac>)
 80057b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3307      	adds	r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <prvHeapInit+0xac>)
 80057d4:	4413      	add	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <prvHeapInit+0xb0>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <prvHeapInit+0xb0>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4413      	add	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057f0:	2208      	movs	r2, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <prvHeapInit+0xb4>)
 8005804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <prvHeapInit+0xb4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <prvHeapInit+0xb4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <prvHeapInit+0xb4>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4a0a      	ldr	r2, [pc, #40]	; (800585c <prvHeapInit+0xb8>)
 8005832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4a09      	ldr	r2, [pc, #36]	; (8005860 <prvHeapInit+0xbc>)
 800583a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <prvHeapInit+0xc0>)
 800583e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005842:	601a      	str	r2, [r3, #0]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000ee4 	.word	0x20000ee4
 8005854:	20001a9c 	.word	0x20001a9c
 8005858:	20001aa4 	.word	0x20001aa4
 800585c:	20001aac 	.word	0x20001aac
 8005860:	20001aa8 	.word	0x20001aa8
 8005864:	20001ab8 	.word	0x20001ab8

08005868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005870:	4b28      	ldr	r3, [pc, #160]	; (8005914 <prvInsertBlockIntoFreeList+0xac>)
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e002      	b.n	800587c <prvInsertBlockIntoFreeList+0x14>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d8f7      	bhi.n	8005876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d108      	bne.n	80058aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d118      	bne.n	80058f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <prvInsertBlockIntoFreeList+0xb0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d00d      	beq.n	80058e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e008      	b.n	80058f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvInsertBlockIntoFreeList+0xb0>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e003      	b.n	80058f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d002      	beq.n	8005906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20001a9c 	.word	0x20001a9c
 8005918:	20001aa4 	.word	0x20001aa4

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <_reclaim_reent>:
 800592c:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <_reclaim_reent+0xa8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4283      	cmp	r3, r0
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	4604      	mov	r4, r0
 8005936:	d04b      	beq.n	80059d0 <_reclaim_reent+0xa4>
 8005938:	69c3      	ldr	r3, [r0, #28]
 800593a:	b143      	cbz	r3, 800594e <_reclaim_reent+0x22>
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d144      	bne.n	80059cc <_reclaim_reent+0xa0>
 8005942:	69e3      	ldr	r3, [r4, #28]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	b111      	cbz	r1, 800594e <_reclaim_reent+0x22>
 8005948:	4620      	mov	r0, r4
 800594a:	f000 f879 	bl	8005a40 <_free_r>
 800594e:	6961      	ldr	r1, [r4, #20]
 8005950:	b111      	cbz	r1, 8005958 <_reclaim_reent+0x2c>
 8005952:	4620      	mov	r0, r4
 8005954:	f000 f874 	bl	8005a40 <_free_r>
 8005958:	69e1      	ldr	r1, [r4, #28]
 800595a:	b111      	cbz	r1, 8005962 <_reclaim_reent+0x36>
 800595c:	4620      	mov	r0, r4
 800595e:	f000 f86f 	bl	8005a40 <_free_r>
 8005962:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005964:	b111      	cbz	r1, 800596c <_reclaim_reent+0x40>
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f86a 	bl	8005a40 <_free_r>
 800596c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800596e:	b111      	cbz	r1, 8005976 <_reclaim_reent+0x4a>
 8005970:	4620      	mov	r0, r4
 8005972:	f000 f865 	bl	8005a40 <_free_r>
 8005976:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005978:	b111      	cbz	r1, 8005980 <_reclaim_reent+0x54>
 800597a:	4620      	mov	r0, r4
 800597c:	f000 f860 	bl	8005a40 <_free_r>
 8005980:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005982:	b111      	cbz	r1, 800598a <_reclaim_reent+0x5e>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 f85b 	bl	8005a40 <_free_r>
 800598a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800598c:	b111      	cbz	r1, 8005994 <_reclaim_reent+0x68>
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f856 	bl	8005a40 <_free_r>
 8005994:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005996:	b111      	cbz	r1, 800599e <_reclaim_reent+0x72>
 8005998:	4620      	mov	r0, r4
 800599a:	f000 f851 	bl	8005a40 <_free_r>
 800599e:	6a23      	ldr	r3, [r4, #32]
 80059a0:	b1b3      	cbz	r3, 80059d0 <_reclaim_reent+0xa4>
 80059a2:	4620      	mov	r0, r4
 80059a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059a8:	4718      	bx	r3
 80059aa:	5949      	ldr	r1, [r1, r5]
 80059ac:	b941      	cbnz	r1, 80059c0 <_reclaim_reent+0x94>
 80059ae:	3504      	adds	r5, #4
 80059b0:	69e3      	ldr	r3, [r4, #28]
 80059b2:	2d80      	cmp	r5, #128	; 0x80
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	d1f8      	bne.n	80059aa <_reclaim_reent+0x7e>
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 f841 	bl	8005a40 <_free_r>
 80059be:	e7c0      	b.n	8005942 <_reclaim_reent+0x16>
 80059c0:	680e      	ldr	r6, [r1, #0]
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 f83c 	bl	8005a40 <_free_r>
 80059c8:	4631      	mov	r1, r6
 80059ca:	e7ef      	b.n	80059ac <_reclaim_reent+0x80>
 80059cc:	2500      	movs	r5, #0
 80059ce:	e7ef      	b.n	80059b0 <_reclaim_reent+0x84>
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	bf00      	nop
 80059d4:	2000005c 	.word	0x2000005c

080059d8 <__libc_init_array>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	4d0d      	ldr	r5, [pc, #52]	; (8005a10 <__libc_init_array+0x38>)
 80059dc:	4c0d      	ldr	r4, [pc, #52]	; (8005a14 <__libc_init_array+0x3c>)
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	2600      	movs	r6, #0
 80059e4:	42a6      	cmp	r6, r4
 80059e6:	d109      	bne.n	80059fc <__libc_init_array+0x24>
 80059e8:	4d0b      	ldr	r5, [pc, #44]	; (8005a18 <__libc_init_array+0x40>)
 80059ea:	4c0c      	ldr	r4, [pc, #48]	; (8005a1c <__libc_init_array+0x44>)
 80059ec:	f000 f880 	bl	8005af0 <_init>
 80059f0:	1b64      	subs	r4, r4, r5
 80059f2:	10a4      	asrs	r4, r4, #2
 80059f4:	2600      	movs	r6, #0
 80059f6:	42a6      	cmp	r6, r4
 80059f8:	d105      	bne.n	8005a06 <__libc_init_array+0x2e>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a00:	4798      	blx	r3
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7ee      	b.n	80059e4 <__libc_init_array+0xc>
 8005a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0a:	4798      	blx	r3
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	e7f2      	b.n	80059f6 <__libc_init_array+0x1e>
 8005a10:	08005b90 	.word	0x08005b90
 8005a14:	08005b90 	.word	0x08005b90
 8005a18:	08005b90 	.word	0x08005b90
 8005a1c:	08005b94 	.word	0x08005b94

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <_free_r>:
 8005a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d044      	beq.n	8005ad0 <_free_r+0x90>
 8005a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4a:	9001      	str	r0, [sp, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a52:	bfb8      	it	lt
 8005a54:	18e4      	addlt	r4, r4, r3
 8005a56:	f000 f83f 	bl	8005ad8 <__malloc_lock>
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <_free_r+0x94>)
 8005a5c:	9801      	ldr	r0, [sp, #4]
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	b933      	cbnz	r3, 8005a70 <_free_r+0x30>
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	6014      	str	r4, [r2, #0]
 8005a66:	b003      	add	sp, #12
 8005a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a6c:	f000 b83a 	b.w	8005ae4 <__malloc_unlock>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d908      	bls.n	8005a86 <_free_r+0x46>
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	1961      	adds	r1, r4, r5
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	bf01      	itttt	eq
 8005a7c:	6819      	ldreq	r1, [r3, #0]
 8005a7e:	685b      	ldreq	r3, [r3, #4]
 8005a80:	1949      	addeq	r1, r1, r5
 8005a82:	6021      	streq	r1, [r4, #0]
 8005a84:	e7ed      	b.n	8005a62 <_free_r+0x22>
 8005a86:	461a      	mov	r2, r3
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b10b      	cbz	r3, 8005a90 <_free_r+0x50>
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	d9fa      	bls.n	8005a86 <_free_r+0x46>
 8005a90:	6811      	ldr	r1, [r2, #0]
 8005a92:	1855      	adds	r5, r2, r1
 8005a94:	42a5      	cmp	r5, r4
 8005a96:	d10b      	bne.n	8005ab0 <_free_r+0x70>
 8005a98:	6824      	ldr	r4, [r4, #0]
 8005a9a:	4421      	add	r1, r4
 8005a9c:	1854      	adds	r4, r2, r1
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	6011      	str	r1, [r2, #0]
 8005aa2:	d1e0      	bne.n	8005a66 <_free_r+0x26>
 8005aa4:	681c      	ldr	r4, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	440c      	add	r4, r1
 8005aac:	6014      	str	r4, [r2, #0]
 8005aae:	e7da      	b.n	8005a66 <_free_r+0x26>
 8005ab0:	d902      	bls.n	8005ab8 <_free_r+0x78>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	6003      	str	r3, [r0, #0]
 8005ab6:	e7d6      	b.n	8005a66 <_free_r+0x26>
 8005ab8:	6825      	ldr	r5, [r4, #0]
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	428b      	cmp	r3, r1
 8005abe:	bf04      	itt	eq
 8005ac0:	6819      	ldreq	r1, [r3, #0]
 8005ac2:	685b      	ldreq	r3, [r3, #4]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	bf04      	itt	eq
 8005ac8:	1949      	addeq	r1, r1, r5
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	6054      	str	r4, [r2, #4]
 8005ace:	e7ca      	b.n	8005a66 <_free_r+0x26>
 8005ad0:	b003      	add	sp, #12
 8005ad2:	bd30      	pop	{r4, r5, pc}
 8005ad4:	20001bf8 	.word	0x20001bf8

08005ad8 <__malloc_lock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	; (8005ae0 <__malloc_lock+0x8>)
 8005ada:	f7ff bfa1 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	20001bf4 	.word	0x20001bf4

08005ae4 <__malloc_unlock>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__malloc_unlock+0x8>)
 8005ae6:	f7ff bf9c 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	20001bf4 	.word	0x20001bf4

08005af0 <_init>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr

08005afc <_fini>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr
